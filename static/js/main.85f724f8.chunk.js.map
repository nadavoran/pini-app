{"version":3,"sources":["componnents/Card.js","componnents/Hand.js","componnents/Player.js","componnents/Deck.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","onMouseDown","e","document","addEventListener","moveCard","stopListen","touches","stopPropagation","preventDefault","setState","visible","animate","state","rel","x","pageX","pos","y","pageY","removeEventListener","changedTouches","mouseUp","card","index","animationEnd","type","this","classList","add","remove","val","className","style","Object","assign","left","top","color","ref","r","onTouchStart","onAnimationEnd","value","getSymbol","React","Component","Hand","cards","cardElement","posGoal","cardIndex","flip","forced","hand","addCard","getCenterX","width","getCenterY","height","onCardMoveEnd","animationName","clearTimer","window","clearTimeout","resolve","flipAnimate","fixSpace","handPos","getPos","cardCount","timer","Math","max","sqrt","abs","setProperty","setTimeout","transform","Promise","reject","min","innerWidth","getBoundingClientRect","visibleLastCard","length","solved","name","round","map","key","toString","valueString","typeString","renderHand","Player","hands","prevProps","prevState","snapshot","cardData","cardPos","cardRealPos","i","player","then","cb","addedPromises","bottom","right","all","results","result","some","catch","console","log","forEach","reset","twoPlayers","currentPlayer","winner","id","CardData","require","Deck","releaseCard","moveCardToHand","success","p2Card","element","lastCardIndex","showCard","createCards","shuffle","res","VALUES","TYPES","push","array","sort","random","mouseEvent","Board","App","runPlayer2","board","player1","addCardToPlayer2","callback","p2CardData","gameEnded","checkWinner","p2Visible","message","indexOf","deck","resetDeck","player2","location","search","includes","onClick","renderControls","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","path","component","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.85f724f8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nclass Card extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      pos: {\r\n        x: 0,\r\n        y: 0\r\n      }\r\n    };\r\n  }\r\n\r\n  getSymbol(type) {\r\n    switch (type) {\r\n      case \"hearts\":\r\n        return \"♥\";\r\n      case \"clubs\":\r\n        return \"♣\";\r\n      case \"spades\":\r\n        return \"♠\";\r\n      case \"diams\":\r\n        return \"♦\";\r\n      default:\r\n        return \"No\";\r\n    }\r\n  }\r\n  onMouseDown = e => {\r\n    if (!this.props.onMouseDown) return;\r\n    // let pos = this.card.getBoundingClientRect();\r\n    document.addEventListener(\"mousemove\", this.moveCard);\r\n    document.addEventListener(\"mouseup\", this.stopListen);\r\n    document.addEventListener(\"touchmove\", this.moveCard);\r\n    document.addEventListener(\"touchend\", this.stopListen);\r\n    if (e.touches) {\r\n      e = e.touches[0];\r\n    } else {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n    }\r\n    // console.log(\"stratX: \", e.pageX - pos.left)\r\n    this.setState({\r\n      visible: true,\r\n      // dragging: true,\r\n      animate: !this.state.visible,\r\n      rel: {\r\n        x: e.pageX - this.state.pos.x,\r\n        y: e.pageY - this.state.pos.y\r\n      }\r\n    });\r\n  };\r\n  moveCard = e => {\r\n    if (e.touches) {\r\n      e = e.touches[0];\r\n    } else {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n    }\r\n    this.setState({\r\n      pos: {\r\n        x: e.pageX - this.state.rel.x,\r\n        y: e.pageY - this.state.rel.y\r\n      }\r\n    });\r\n  };\r\n  stopListen = e => {\r\n    document.removeEventListener(\"mouseup\", this.stopListen);\r\n    document.removeEventListener(\"mousemove\", this.moveCard);\r\n    document.removeEventListener(\"touchend\", this.stopListen);\r\n    document.removeEventListener(\"touchmove\", this.moveCard);\r\n    e = e.touches ? e.changedTouches[0] : e;\r\n    this.props.mouseUp &&\r\n      this.props.mouseUp(\r\n        {\r\n          x: e.pageX,\r\n          y: e.pageY\r\n        },\r\n        this.props.card,\r\n        this.card,\r\n        this.props.index\r\n      );\r\n  };\r\n  animationEnd = () => {\r\n    this.setState({\r\n      animate: false\r\n    });\r\n  };\r\n  showCard() {\r\n    this.card.classList.add(\"animate\");\r\n    this.card.classList.remove(\"hidden\");\r\n  }\r\n\r\n  get element() {\r\n    return this.card;\r\n  }\r\n  renderCorner(val, type, pos) {\r\n    return (\r\n      <div className={\"small \" + pos}>\r\n        <div className=\"small-number\">{val}</div>\r\n        <div className=\"small-symbol\">{type}</div>\r\n      </div>\r\n    );\r\n  }\r\n  render() {\r\n    let visible =\r\n      \"card-container\" +\r\n      (this.props.visible || this.state.visible ? \"\" : \" hidden\") +\r\n      (this.state.animate ? \" animate\" : \"\");\r\n    let style = Object.assign(\r\n      {\r\n        left: this.state.pos.x ? this.state.pos.x + \"px\" : \"initial\",\r\n        top: this.state.pos.y ? this.state.pos.y + \"px\" : \"initial\",\r\n        color: this.props.card.color === \"r\" ? \"#d12d36\" : \"#333\"\r\n      },\r\n      this.props.style\r\n    );\r\n    return (\r\n      <div\r\n        ref={r => (this.card = r)}\r\n        className={visible}\r\n        style={style}\r\n        onTouchStart={this.onMouseDown}\r\n        onMouseDown={this.onMouseDown}\r\n        onAnimationEnd={this.animationEnd}\r\n      >\r\n        <div className=\"side front\">\r\n          {/* {this.renderCorner(this.props.value, this.getSymbol(this.props.type), \"top\")} */}\r\n          <div className={\"small top\"}>\r\n            <div className=\"small-number\">{this.props.value}</div>\r\n            <div className=\"small-symbol\">\r\n              {this.getSymbol(this.props.type)}\r\n            </div>\r\n          </div>\r\n          <div className=\"middle\">\r\n            <div>{this.props.value}</div>\r\n          </div>\r\n          {/* {this.renderCorner(this.props.value, this.getSymbol(this.props.type), \"bottom\")} */}\r\n          <div className={\"small bottom\"}>\r\n            <div className=\"small-number\">{this.props.value}</div>\r\n            <div className=\"small-symbol\">\r\n              {this.getSymbol(this.props.type)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"side back\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nimport './Hand.css';\r\n\r\nclass Hand extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            cards: []\r\n        }\r\n    }\r\n    componentDidMount(){\r\n    }\r\n    addCard(card, cardElement, posGoal, cardIndex, flip, forced) {\r\n        // let cards = [...this.state.cards];\r\n        if (this.props.hand.addCard(card) || forced) {\r\n            function getCenterX(pos) {\r\n                return pos.x + (pos.width / 2);\r\n            }\r\n            function getCenterY(pos) {\r\n                return pos.y + (pos.height / 2);\r\n            }\r\n            // cards.push(card);\r\n            // pos goal shold be the transform = translate3d(posGoal.x+\"px\", posGoal.y + \"px\", 10px )\r\n            let onCardMoveEnd = (e)=>{\r\n                if (e.animationName === \"trans-animate\"){\r\n                    clearTimer && window.clearTimeout(clearTimer);\r\n                    cardElement.classList.remove(\"trans-animate\");\r\n                    cardElement.removeEventListener(\"animattionend\", onCardMoveEnd);\r\n                    this.resolve(true);\r\n                    this.setState({ cards: [...this.props.hand.cards] });\r\n                }\r\n            }\r\n            cardElement.addEventListener(\"animationend\", onCardMoveEnd);\r\n            // cardElement\r\n            let flipAnimate = \"\";\r\n            let fixSpace = 0.28;\r\n            if (flip) {\r\n              flipAnimate = \"rotate(180deg)\";\r\n              fixSpace *= -1;\r\n            } \r\n            let handPos = this.getPos();\r\n            let x = getCenterX(handPos) - getCenterX(posGoal);\r\n            let y =\r\n              getCenterY(handPos) -\r\n              getCenterY(posGoal) +\r\n              posGoal.height * fixSpace * this.cardCount;\r\n            let timer = Math.max(300, Math.sqrt(Math.abs(y)) * 2 + 350);\r\n            cardElement.style.setProperty(\"--tran-time\", timer + \"ms\");\r\n            let clearTimer = window.setTimeout(() => {\r\n                onCardMoveEnd({ animationName: \"trans-animate\" })\r\n            }, timer);\r\n            cardElement.classList.add(\"trans-animate\");\r\n                y = y - 0.25 * cardIndex;\r\n            // cardElement.style.transform = `translate3d(${x - (0.25 * cardIndex)}px, ${y}px, 10px) ${this.props.twoPlayers ? \" rotate(180deg)\" : \"\"}`;\r\n            cardElement.style.transform = `translate3d(${x -\r\n              0.25 * cardIndex}px, ${y}px, 10px) ${flipAnimate}`;\r\n            return new Promise((resolve, reject)=>{\r\n                this.resolve = resolve;\r\n            });\r\n        }\r\n        return Promise.resolve(false);\r\n    }\r\n    reset(){\r\n        this.setState({ \r\n            cards: []\r\n        });\r\n    }\r\n    calcSpace(){\r\n        return Math.min(window.innerWidth * 0.05, 35);\r\n    }\r\n    get cardCount(){\r\n        return this.state.cards.length;\r\n    }\r\n    getPos(){\r\n        return this.hand.getBoundingClientRect();\r\n    }\r\n    renderHand(){\r\n        if (this.props.visibleLastCard && this.state.cards.length === 5 ){\r\n            return <div className=\"hand-result\">{this.props.hand.solved.name}</div>\r\n        }\r\n    }\r\n    render(){\r\n        let style= {\r\n            \"borderColor\": this.props.round > this.state.cards.length ? \"green\" : \"red\"    \r\n        }\r\n        return <div ref={(r) => this.hand = r} style={style} className=\"hand-container\">\r\n            {this.state.cards.map((card, index)=>{\r\n                let transform = `translateY(${28 * index}%)`;\r\n                let visible = this.props.visibleLastCard || index < 4;\r\n                return <Card card={card} key={card.toString() + index} index={index} value={card.valueString} type={card.typeString} style={{ transform }} visible={visible} />\r\n            })}\r\n            {this.renderHand()}\r\n        </div>      \r\n    }\r\n}\r\n\r\nexport default Hand;","import React from 'react';\r\nimport Hand from './Hand';\r\n\r\nimport './Player.css';\r\n\r\nclass Player extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            hands: [\r\n                { },\r\n                { },\r\n                { },\r\n                { },\r\n                { }\r\n            ]\r\n        };\r\n        this.hands = [];\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot){\r\n        if (prevProps.cardData !== this.props.cardData){\r\n            let cardPos = this.props.cardData.pos;\r\n            let cardRealPos = this.props.cardData.cardElement.getBoundingClientRect();\r\n            if (!cardPos){\r\n                // player 2 add card\r\n                let i = 0;\r\n                while (!this.props.player.addCard(this.props.cardData.card, i) && i< 5){\r\n                    i += 1;\r\n                }\r\n                // let handPos = this.hands[i].getPos();\r\n                // let x = getCenterX(handPos) - getCenterX(cardRealPos);\r\n                // let y = getCenterY(handPos) - getCenterY(cardRealPos) + (35 * (this.hands[i].cardCount));\r\n                this.hands[i]\r\n                  .addCard(\r\n                    this.props.cardData.card,\r\n                    this.props.cardData.cardElement,\r\n                    cardRealPos,\r\n                    this.props.cardData.cardIndex,\r\n                    this.props.cardData.flip,\r\n                    true\r\n                  )\r\n                  .then(this.props.cardData.cb);\r\n                return;\r\n            }\r\n\r\n            let addedPromises = this.hands.map((hand, index) => {\r\n                let handPos = hand.getPos();\r\n                // console.log(`cb:${cardPos.x} > ht:${handPos.top} && ct:${cardPos.top} < hb:${handPos.height + handPos.top} &&\r\n                //     cl:${cardPos.left} < hr:${handPos.right} && cr:${cardPos.right} > hl:${handPos.left}`);\r\n                if (cardPos.y > handPos.top && cardPos.y < handPos.bottom &&\r\n                    cardPos.x < handPos.right && cardPos.x > handPos.left &&\r\n                    this.props.player.round > hand.cardCount) {\r\n                    let forced = this.props.player.addCard(this.props.cardData.card, index);\r\n                    // let x = getCenterX(handPos) - getCenterX(cardRealPos) + 1;\r\n                    // let y = getCenterY(handPos) - getCenterY(cardRealPos) - (35 * (hand.cardCount) + 1);\r\n                    return hand.addCard(\r\n                      this.props.cardData.card,\r\n                      this.props.cardData.cardElement,\r\n                      cardRealPos,\r\n                      this.props.cardData.cardIndex,\r\n                      this.props.cardData.flip,\r\n                      forced\r\n                    );\r\n                    // let hands = [...this.state.hands];\r\n                    // hands[index].cards.push(this.props.cardData.card);\r\n                    // this.setState({hands});\r\n                }\r\n                return Promise.resolve(false);\r\n            });\r\n            Promise.all(addedPromises).then(results=>{\r\n                let result = results.some((result) => result);\r\n                this.props.cardData.cb(result);\r\n            }).catch(e=>{\r\n                console.log(e);\r\n            })\r\n            // this.props.cardData.cb(this.hands.some((hand, index) => {\r\n            //     let handPos = hand.getPos();\r\n            //     // console.log(`cb:${cardPos.x} > ht:${handPos.top} && ct:${cardPos.top} < hb:${handPos.height + handPos.top} &&\r\n            //     //     cl:${cardPos.left} < hr:${handPos.right} && cr:${cardPos.right} > hl:${handPos.left}`);\r\n            //     if (cardPos.y > handPos.top && cardPos.y < handPos.bottom &&\r\n            //       cardPos.x < handPos.right && cardPos.x > handPos.left && \r\n            //         this.props.player.round > hand.cardCount) \r\n            //       {\r\n            //         let forced = this.props.player.addCard(this.props.cardData.card, index);\r\n            //         let x = getCenterX(handPos) - getCenterX(cardRealPos);\r\n            //         let y = getCenterY(handPos) - getCenterY(cardRealPos) + (35 * (hand.cardCount - 1));\r\n            //         return hand.addCard(this.props.cardData.card, this.props.cardData.cardElement, { x, y }, forced);\r\n            //         // let hands = [...this.state.hands];\r\n            //         // hands[index].cards.push(this.props.cardData.card);\r\n            //         // this.setState({hands});\r\n            //     }\r\n            //     return false;\r\n            // }));\r\n        }\r\n    }\r\n    reset(){\r\n        this.hands.forEach(hand=>{\r\n            hand.reset();\r\n        })\r\n    }\r\n    render() {\r\n        return <div className=\"player-container\">\r\n            { this.props.player.hands.map((hand, index) => {\r\n                return <Hand ref={(r)=>{\r\n                    this.hands[index] = r;\r\n                }} twoPlayers={this.props.twoPlayers} key={this.props.name+index} round={this.props.player.round} hand={hand} visibleLastCard={this.props.currentPlayer || this.props.winner} />\r\n            })\r\n            }\r\n            {this.props.winner && this.props.winner === this.props.id ? (<div className=\"winner-banner\">WINNER</div>): null}\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Player;","import React from 'react';\r\nimport Card from './Card';\r\n// import { CardData } from 'pini';\r\n\r\nimport './Deck.css';\r\n\r\nconst { CardData }= require('pini');\r\n\r\nclass Deck extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        let cards = this.createCards();\r\n        this.state = {\r\n            cards: this.shuffle(cards),\r\n            lastCardIndex: cards.length\r\n        }\r\n        this.cards = [];\r\n    }\r\n    createCards(){\r\n        let res = [];\r\n        CardData.VALUES.forEach((value, index) => {\r\n            if (!index) return;\r\n            CardData.TYPES.forEach(type => {\r\n                res.push(new CardData.Card(value, type));\r\n            }); \r\n        });\r\n        return res;\r\n    }\r\n    shuffle(array) {\r\n        return array.sort(() => Math.random() - 0.5);\r\n    }\r\n    releaseCard = (pos, card, cardElement, cardIndex)=>{\r\n        this.props.moveCardToHand(pos, card, cardElement, cardIndex, (success, visible) => {\r\n            if (success) {\r\n                // remove current card and add card for p2\r\n                // Promise.resolve(1).then(()=>{\r\n                // this.props.p2Card(this.state.cards[--cardIndex], cardElement);\r\n                cardIndex -= 1;\r\n                this.props.p2Card(this.state.cards[cardIndex], this.cards[cardIndex].element, cardIndex, ()=>{\r\n                        Promise.resolve(1).then(()=>this.setState({ lastCardIndex: cardIndex }));\r\n                    });\r\n                // visible && this.cards[cardIndex].showCard();\r\n                visible && Promise.resolve(1).then(()=>this.cards[cardIndex].showCard());\r\n                // });\r\n            }\r\n        });\r\n    }\r\n\r\n    resetDeck(){\r\n        this.setState({\r\n            cards: this.shuffle(this.state.cards),\r\n            lastCardIndex: this.state.cards.length\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"deck-container\">\r\n            {this.state.cards.map((card, index) => {\r\n                let transform = `translate(-${0.25 * index}px, -${0.25 * index}px) ${this.props.twoPlayers? \"rotate(180deg)\" : \"\"}`;\r\n                if (index < this.state.lastCardIndex){\r\n                    let mouseEvent = index === this.state.lastCardIndex - 1;\r\n                    return <Card ref={(r) => r && (\r\n                            this.cards[index] = r)} card={card} key={card.toString() + index} style={{ transform}} index={index} value={card.valueString} type={card.typeString} onMouseDown={mouseEvent} mouseUp={this.releaseCard} />\r\n                }\r\n                return null;\r\n            })}\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Deck;","import React from 'react';\nimport './App.css';\nimport Player from './componnents/Player';\nimport Deck from './componnents/Deck';\nimport './reponsive.css';\n\nconst { Board } = require('pini');\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={};\n    this.board = new Board();\n    this.twoPlayers = props.location.search.includes(\"twoPlayers=true\");\n  }\n\n  moveCardToHand = (pos, card, cardElement, cardIndex, cb)=>{\n    this.setState({\n      cardData:{\n        pos, card, cardElement, cardIndex, cb:(runPlayer2)=>{\n\n          cb(runPlayer2, this.board.player1.round < 5);\n        }\n      }\n    });\n  }\n  addCardToPlayer2 = (p2Card, cardElement, cardIndex, callback) => {\n    this.setState({\n      p2CardData: {\n        pos: false, card: p2Card, cardElement, cardIndex, flip:true, cb: () => {\n          callback();\n          if (this.board.gameEnded()) {\n            this.checkWinner();\n          }\n        }\n      }\n    });\n  }\n\n  checkWinner=()=>{\n    // need to call this function when last card is placed\n    try{\n      let winner = this.board.winner(); \n      console.log(winner);\n      this.setState({\n        p2Visible: true,\n        winner\n      })\n    } catch(e){\n      if (e.message.indexOf(\"h.qualifiesHigh is not a function\") === -1){\n        console.log(e.message);\n      }\n    } \n    // reveale player 2 hands + results\n    // display winner\n\n  }\n  reset=()=>{\n    this.deck.resetDeck();\n    this.board = new Board();\n    this.player1.reset();\n    this.player2.reset();\n    this.setState({\n      p2Visible: false,\n      winner: null\n    })\n  }\n\n  renderControls(){\n    return <div className=\"controls-container\">\n      <button className=\"check-button\" name=\"finish\" onClick={this.reset}>New Game</button>\n      <Deck ref={(r) => this.deck = r} moveCardToHand={this.moveCardToHand} p2Card={this.addCardToPlayer2} />\n    </div>\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <div className={\"board\"}>\n          <Player\n            ref={r => (this.player1 = r)}\n            id={1}\n            winner={this.state.winner}\n            player={this.board.player1}\n            visible={this.state.p2Visible}\n            cardData={this.state.p2CardData}\n            name=\"Player1\"\n          />\n          {this.renderControls()}\n          <Player\n            currentPlayer\n            ref={r => (this.player2 = r)}\n            name=\"Player2\"\n            id={-1}\n            cardData={this.state.cardData}\n            winner={this.state.winner}\n            // visible={this.state.p2Visible}\n            player={this.board.player2}\n          />\n        </div>\n        {/* <button className=\"check-button\" name=\"check\" onClick={this.checkWinner}>Check</button> */}\n        {/* <button className=\"check-button\" style={{ top: \"100px\" }} name=\"finish\" onClick={this.addCardToPlayer2}>Player2</button> */}\n        <div className=\"alert\">\n          <span>Thank you for running this game on landscape</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// {/* hands={[\n//             { cards: [] },\n//             { cards: [] },\n//             { cards: [{ valueString: \"A\", typeString: \"diams\" }] },\n//             { cards: [{ valueString: \"A\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }, { valueString: \"A\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }] },\n//             { cards: [{ valueString: \"A\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }] }\n//           ]} */}\n// {/* hands={[\n//             { cards: [] },\n//             { cards: [] },\n//             { cards: [{ valueString: \"A\", typeString: \"diams\" }] },\n//             { cards: [] },\n//             { cards: [{ valueString: \"A\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }, { valueString: \"A\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }] }\n//           ]} */}\n// {/* <Hand cards={[]} /> */ }\n// {/* <Hand cards={[{ valueString: \"A\", typeString: \"diams\" }]} /> */ }\n// {/* <Hand cards={[{ valueString: \"A\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }]} /> */ }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      console.log(\"service window loaded\");\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n// import { Provider } from 'react-redux';\n// import {store} from './store';\n\nReactDOM.render(\n    <Router>\n        <Route path=\"/\" component={App} />\n    </Router>, document.getElementById('root'));\n// const rootElement = document.getElementById('root')\n// ReactDOM.render(\n//     <Provider store={store}>\n//         <App />\n//     </Provider>,\n//     rootElement\n// )\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}