{"version":3,"sources":["componnents/Card.js","componnents/Hand.js","componnents/Player.js","componnents/Deck.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","onMouseDown","e","pos","card","getBoundingClientRect","document","addEventListener","moveCard","stopListen","touches","stopPropagation","preventDefault","setState","visible","animate","state","rel","x","pageX","y","pageY","leftEdge","topEdge","rightEdge","window","innerWidth","width","bottomEdge","innerHeight","height","Math","max","min","removeEventListener","changedTouches","mouseUp","index","animationEnd","type","this","classList","add","remove","val","className","style","Object","assign","left","top","color","ref","r","onTouchStart","onAnimationEnd","value","getSymbol","React","Component","Hand","cards","cardElement","posGoal","cardIndex","flip","forced","hand","addCard","getCenterX","getCenterY","onCardMoveEnd","animationName","clearTimer","clearTimeout","resolve","flipAnimate","fixSpace","handPos","getPos","cardCount","timer","sqrt","abs","setProperty","setTimeout","transform","Promise","reject","visibleLastCard","length","solved","name","round","map","key","toString","valueString","typeString","renderHand","Player","modifyName","player","target","hands","prevProps","prevState","snapshot","cardData","cardPos","cardRealPos","ignoreCard","i","then","cb","addedPromises","bottom","right","all","results","result","some","catch","console","log","forEach","reset","winner","id","currentPlayer","onChange","twoPlayers","CardData","require","Deck","releaseCard","moveCardToHand","success","lastCardIndex","createCards","shuffle","res","VALUES","TYPES","push","array","sort","random","animateFlip","element","showCard","player2","mouseEvent","Board","App","player1","runPlayer2","board","gameEnded","checkWinner","deck","sendNextCard","addCardToPlayer2","p2Card","callback","p2CardData","p2Visible","message","indexOf","switchPlayers","location","search","resetDeck","includes","onClick","renderControls","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","path","component","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.51461633.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nclass Card extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      pos: {\r\n        x: 0,\r\n        y: 0\r\n      }\r\n    };\r\n  }\r\n\r\n  getSymbol(type) {\r\n    switch (type) {\r\n      case \"hearts\":\r\n        return \"♥\";\r\n      case \"clubs\":\r\n        return \"♣\";\r\n      case \"spades\":\r\n        return \"♠\";\r\n      case \"diams\":\r\n        return \"♦\";\r\n      default:\r\n        return \"No\";\r\n    }\r\n  }\r\n  onMouseDown = e => {\r\n    if (!this.props.onMouseDown) return;\r\n    let pos = this.card.getBoundingClientRect();\r\n    document.addEventListener(\"mousemove\", this.moveCard);\r\n    document.addEventListener(\"mouseup\", this.stopListen);\r\n    document.addEventListener(\"touchmove\", this.moveCard);\r\n    document.addEventListener(\"touchend\", this.stopListen);\r\n    if (e.touches) {\r\n      e = e.touches[0];\r\n    } else {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n    }\r\n    // console.log(\"stratX: \", e.pageX - pos.left)\r\n    this.setState({\r\n      visible: true,\r\n      // dragging: true,\r\n      animate: !this.state.visible,\r\n      rel: {\r\n        x: e.pageX - this.state.pos.x,\r\n        y: e.pageY - this.state.pos.y,\r\n        leftEdge: (e.pageX - pos.x),\r\n        topEdge: (e.pageY - pos.y),\r\n        rightEdge: window.innerWidth - pos.width + (e.pageX - pos.x),\r\n        bottomEdge: window.innerHeight - pos.height + (e.pageY - pos.y)\r\n      }\r\n    });\r\n  };\r\n  moveCard = e => {\r\n    if (e.touches) {\r\n      e = e.touches[0];\r\n    } else {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n    }\r\n    let x = e.pageX - this.state.rel.x;\r\n    if (x < 0){\r\n        x = Math.max(this.state.rel.leftEdge, e.pageX) - this.state.rel.x;\r\n    } else {\r\n        x = Math.min(this.state.rel.rightEdge, e.pageX) - this.state.rel.x;\r\n    }\r\n    let y = e.pageY - this.state.rel.y;\r\n    if (y < 0) {\r\n      y = Math.max(this.state.rel.topEdge, e.pageY) - this.state.rel.y;\r\n    } else {\r\n      y = Math.min(this.state.rel.bottomEdge, e.pageY) - this.state.rel.y;\r\n    }\r\n    this.setState({\r\n      pos: {\r\n        x: x,\r\n        y: y\r\n      }\r\n    });\r\n  };\r\n  stopListen = e => {\r\n    document.removeEventListener(\"mouseup\", this.stopListen);\r\n    document.removeEventListener(\"mousemove\", this.moveCard);\r\n    document.removeEventListener(\"touchend\", this.stopListen);\r\n    document.removeEventListener(\"touchmove\", this.moveCard);\r\n    e = e.touches ? e.changedTouches[0] : e;\r\n    this.props.mouseUp &&\r\n      this.props.mouseUp(\r\n        {\r\n          x: e.pageX,\r\n          y: e.pageY\r\n        },\r\n        this.props.card,\r\n        this.card,\r\n        this.props.index\r\n      );\r\n  };\r\n  animationEnd = () => {\r\n    this.setState({\r\n      animate: false\r\n    });\r\n  };\r\n  showCard() {\r\n    this.card.classList.add(\"animate\");\r\n    this.card.classList.remove(\"hidden\");\r\n  }\r\n\r\n  get element() {\r\n    return this.card;\r\n  }\r\n  renderCorner(val, type, pos) {\r\n    return (\r\n      <div className={\"small \" + pos}>\r\n        <div className=\"small-number\">{val}</div>\r\n        <div className=\"small-symbol\">{type}</div>\r\n      </div>\r\n    );\r\n  }\r\n  render() {\r\n    let visible =\r\n      \"card-container\" +\r\n      (this.props.visible || this.state.visible ? \"\" : \" hidden\") +\r\n      (this.state.animate ? \" animate\" : \"\");\r\n    let style = Object.assign(\r\n      {\r\n        left: this.state.pos.x ? this.state.pos.x + \"px\" : \"initial\",\r\n        top: this.state.pos.y ? this.state.pos.y + \"px\" : \"initial\",\r\n        color: this.props.card.color === \"r\" ? \"#d12d36\" : \"#333\"\r\n      },\r\n      this.props.style\r\n    );\r\n    return (\r\n      <div\r\n        ref={r => (this.card = r)}\r\n        className={visible}\r\n        style={style}\r\n        onTouchStart={this.onMouseDown}\r\n        onMouseDown={this.onMouseDown}\r\n        onAnimationEnd={this.animationEnd}\r\n      >\r\n        <div className=\"side front\">\r\n          {/* {this.renderCorner(this.props.value, this.getSymbol(this.props.type), \"top\")} */}\r\n          <div className={\"small top\"}>\r\n            <div className=\"small-number\">{this.props.value}</div>\r\n            <div className=\"small-symbol\">\r\n              {this.getSymbol(this.props.type)}\r\n            </div>\r\n          </div>\r\n          <div className=\"middle\">\r\n            <div>{this.props.value}</div>\r\n          </div>\r\n          {/* {this.renderCorner(this.props.value, this.getSymbol(this.props.type), \"bottom\")} */}\r\n          <div className={\"small bottom\"}>\r\n            <div className=\"small-number\">{this.props.value}</div>\r\n            <div className=\"small-symbol\">\r\n              {this.getSymbol(this.props.type)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"side back\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nimport './Hand.css';\r\n\r\nclass Hand extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            cards: []\r\n        }\r\n    }\r\n    componentDidMount(){\r\n    }\r\n    addCard(card, cardElement, posGoal, cardIndex, flip, forced) {\r\n        // let cards = [...this.state.cards];\r\n        if (this.props.hand.addCard(card) || forced) {\r\n            function getCenterX(pos) {\r\n                return pos.x + (pos.width / 2);\r\n            }\r\n            function getCenterY(pos) {\r\n                return pos.y + (pos.height / 2);\r\n            }\r\n            // cards.push(card);\r\n            // pos goal shold be the transform = translate3d(posGoal.x+\"px\", posGoal.y + \"px\", 10px )\r\n            let onCardMoveEnd = (e)=>{\r\n                if (e.animationName === \"trans-animate\"){\r\n                    clearTimer && window.clearTimeout(clearTimer);\r\n                    cardElement.classList.remove(\"trans-animate\");\r\n                    cardElement.removeEventListener(\"animattionend\", onCardMoveEnd);\r\n                    this.resolve(true);\r\n                    this.setState({ cards: [...this.props.hand.cards] });\r\n                }\r\n            }\r\n            cardElement.addEventListener(\"animationend\", onCardMoveEnd);\r\n            // cardElement\r\n            let flipAnimate = \"\";\r\n            let fixSpace = 0.28;\r\n            if (flip) {\r\n              flipAnimate = \"rotate(180deg)\";\r\n              fixSpace *= -1;\r\n            } \r\n            let handPos = this.getPos();\r\n            let x = getCenterX(handPos) - getCenterX(posGoal);\r\n            let y =\r\n              getCenterY(handPos) -\r\n              getCenterY(posGoal) +\r\n              posGoal.height * fixSpace * this.cardCount;\r\n            let timer = Math.max(300, Math.sqrt(Math.abs(y)) * 2 + 350);\r\n            cardElement.style.setProperty(\"--tran-time\", timer + \"ms\");\r\n            let clearTimer = window.setTimeout(() => {\r\n                onCardMoveEnd({ animationName: \"trans-animate\" })\r\n            }, timer);\r\n            cardElement.classList.add(\"trans-animate\");\r\n                y = y - 0.25 * cardIndex;\r\n            // cardElement.style.transform = `translate3d(${x - (0.25 * cardIndex)}px, ${y}px, 10px) ${this.props.twoPlayers ? \" rotate(180deg)\" : \"\"}`;\r\n            cardElement.style.transform = `translate3d(${x - 0.25 * cardIndex}px, ${y}px, 10px) ${flipAnimate}`;\r\n            return new Promise((resolve, reject)=>{\r\n                this.resolve = resolve;\r\n            });\r\n        }\r\n        return Promise.resolve(false);\r\n    }\r\n    reset(){\r\n        this.setState({ \r\n            cards: []\r\n        });\r\n    }\r\n    calcSpace(){\r\n        return Math.min(window.innerWidth * 0.05, 35);\r\n    }\r\n    get cardCount(){\r\n        return this.state.cards.length;\r\n    }\r\n    getPos(){\r\n        return this.hand.getBoundingClientRect();\r\n    }\r\n    renderHand(){\r\n        if (this.props.visibleLastCard && this.state.cards.length === 5 ){\r\n            return <div className=\"hand-result\">{this.props.hand.solved.name}</div>\r\n        }\r\n    }\r\n    render(){\r\n        let style= {\r\n            \"borderColor\": this.props.round > this.state.cards.length ? \"green\" : \"red\"    \r\n        }\r\n        return <div ref={(r) => this.hand = r} style={style} className=\"hand-container\">\r\n            {this.state.cards.map((card, index)=>{\r\n                let transform = `translateY(${28 * index}%)`;\r\n                let visible = this.props.visibleLastCard || index < 4;\r\n                return <Card card={card} key={card.toString() + index} index={index} value={card.valueString} type={card.typeString} style={{ transform }} visible={visible} />\r\n            })}\r\n            {this.renderHand()}\r\n        </div>      \r\n    }\r\n}\r\n\r\nexport default Hand;","import React from 'react';\r\nimport Hand from './Hand';\r\n\r\nimport './Player.css';\r\n\r\nclass Player extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hands: [{}, {}, {}, {}, {}]\r\n    };\r\n    this.hands = [];\r\n  }\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (!state.name) {\r\n      return {\r\n          name: props.name\r\n      };\r\n    }\r\n\r\n    // Return null to indicate no change to state.\r\n    return null;\r\n  }\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.cardData !== this.props.cardData) {\r\n      let cardPos = this.props.cardData.pos;\r\n      let cardRealPos = this.props.cardData.cardElement.getBoundingClientRect();\r\n      if (this.props.ignoreCard) return false;\r\n      if (!cardPos) {\r\n        // player 2 add card\r\n        let i = 0;\r\n        while (\r\n          !this.props.player.addCard(this.props.cardData.card, i) &&\r\n          i < 5\r\n        ) {\r\n          i += 1;\r\n        }\r\n        this.hands[i]\r\n          .addCard(\r\n            this.props.cardData.card,\r\n            this.props.cardData.cardElement,\r\n            cardRealPos,\r\n            this.props.cardData.cardIndex,\r\n            this.props.cardData.flip,\r\n            true\r\n          )\r\n          .then(this.props.cardData.cb);\r\n        return;\r\n      }\r\n\r\n      let addedPromises = this.hands.map((hand, index) => {\r\n        let handPos = hand.getPos();\r\n        // console.log(`cb:${cardPos.x} > ht:${handPos.top} && ct:${cardPos.top} < hb:${handPos.height + handPos.top} &&\r\n        //     cl:${cardPos.left} < hr:${handPos.right} && cr:${cardPos.right} > hl:${handPos.left}`);\r\n        if (\r\n          cardPos.y > handPos.top &&\r\n          cardPos.y < handPos.bottom &&\r\n          cardPos.x < handPos.right &&\r\n          cardPos.x > handPos.left &&\r\n          this.props.player.round > hand.cardCount\r\n        ) {\r\n          let forced = this.props.player.addCard(\r\n            this.props.cardData.card,\r\n            index\r\n          );\r\n          return hand.addCard(\r\n            this.props.cardData.card,\r\n            this.props.cardData.cardElement,\r\n            cardRealPos,\r\n            this.props.cardData.cardIndex,\r\n            this.props.cardData.flip,\r\n            forced\r\n          );\r\n        }\r\n        return Promise.resolve(false);\r\n      });\r\n      Promise.all(addedPromises)\r\n        .then(results => {\r\n          let result = results.some(result => result);\r\n          this.props.cardData.cb(result);\r\n        })\r\n        .catch(e => {\r\n          console.log(e);\r\n        });\r\n    }\r\n  }\r\n  modifyName = e => {\r\n    this.props.player.name = e.target.value;\r\n    this.setState({\r\n      name: this.props.player.name\r\n    });\r\n  };\r\n  reset() {\r\n    this.hands.forEach(hand => {\r\n      hand.reset();\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"player-container\">\r\n        <div\r\n          className={\r\n            \"player-name\" +\r\n            ((this.props.winner &&\r\n            this.props.winner === this.props.id) ||\r\n            (!this.props.winner && this.props.currentPlayer)\r\n              ? \" active\"\r\n              : \"\")\r\n          }\r\n        >\r\n          <div>{this.state.name}</div>\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.name}\r\n            onChange={this.modifyName}\r\n          />\r\n        </div>\r\n        <div className=\"hands-container\">\r\n          {this.props.player.hands.map((hand, index) => {\r\n            return (\r\n              <Hand\r\n                ref={r => {\r\n                  this.hands[index] = r;\r\n                }}\r\n                twoPlayers={this.props.twoPlayers}\r\n                key={this.props.name + index}\r\n                round={this.props.player.round}\r\n                hand={hand}\r\n                visibleLastCard={this.props.visible || this.props.winner}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n        {this.props.winner && this.props.winner === this.props.id ? (\r\n          <div className=\"winner-banner\">WINNER</div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Player;","import React from 'react';\r\nimport Card from './Card';\r\n// import { CardData } from 'pini';\r\n\r\nimport './Deck.css';\r\n\r\nconst { CardData }= require('pini');\r\n\r\nclass Deck extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        let cards = this.createCards();\r\n        this.state = {\r\n            cards: this.shuffle(cards),\r\n            lastCardIndex: cards.length\r\n        }\r\n        this.cards = [];\r\n    }\r\n    createCards(){\r\n        let res = [];\r\n        CardData.VALUES.forEach((value, index) => {\r\n            if (!index) return;\r\n            CardData.TYPES.forEach(type => {\r\n                res.push(new CardData.Card(value, type));\r\n            }); \r\n        });\r\n        return res;\r\n    }\r\n    shuffle(array) {\r\n        return array.sort(() => Math.random() - 0.5);\r\n    }\r\n    sendNextCard(animateFlip, cb = ()=>{}){\r\n        let cardIndex = this.state.lastCardIndex - 1;\r\n        cb(this.state.cards[cardIndex], this.cards[cardIndex].element, cardIndex, ()=>{\r\n                Promise.resolve(1).then(()=>this.setState({ lastCardIndex: cardIndex }));\r\n            });\r\n        // visible && this.cards[cardIndex].showCard();\r\n        animateFlip &&\r\n          Promise.resolve(1).then(() =>\r\n            this.cards[cardIndex].showCard()\r\n          );\r\n    }\r\n    releaseCard = (pos, card, cardElement, cardIndex)=>{\r\n        this.props.moveCardToHand(pos, card, cardElement, cardIndex, (success, visible) => {\r\n            if (success) {\r\n                // remove current card and add card for p2\r\n                // Promise.resolve(1).then(()=>{\r\n                // this.props.p2Card(this.state.cards[--cardIndex], cardElement);\r\n                // cardIndex -= 1;\r\n                // this.props.p2Card(this.state.cards[cardIndex], this.cards[cardIndex].element, cardIndex, ()=>{\r\n                        // Promise.resolve(1).then(()=>this.setState({ lastCardIndex: cardIndex }));\r\n                this.setState({ lastCardIndex: cardIndex });\r\n                    // });\r\n                // visible && this.cards[cardIndex].showCard();\r\n                // visible && Promise.resolve(1).then(()=>this.cards[cardIndex].showCard());\r\n                // });\r\n            }\r\n        });\r\n    }\r\n\r\n    resetDeck(){\r\n        this.setState({\r\n            cards: this.shuffle(this.state.cards),\r\n            lastCardIndex: this.state.cards.length\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"deck-container\">\r\n            {this.state.cards.map((card, index) => {\r\n                let transform = `translate(-${0.25 * index}px, -${0.25 * index}px) ${this.props.player2? \"rotate(180deg)\" : \"\"}`;\r\n                if (index < this.state.lastCardIndex){\r\n                    let mouseEvent = index === this.state.lastCardIndex - 1;\r\n                    return <Card ref={(r) => r && (\r\n                            this.cards[index] = r)} card={card} key={card.toString() + index} style={{ transform}} index={index} value={card.valueString} type={card.typeString} onMouseDown={mouseEvent} mouseUp={this.releaseCard} />\r\n                }\r\n                return null;\r\n            })}\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Deck;","import React from 'react';\nimport './App.css';\nimport Player from './componnents/Player';\nimport Deck from './componnents/Deck';\nimport './reponsive.css';\n\nconst { Board } = require('pini');\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      player1: true\n    };\n    this.board = new Board();\n    this.twoPlayers = props.location.search.includes(\"twoPlayers=true\");\n  }\n\n  moveCardToHand = (pos, card, cardElement, cardIndex, cb)=>{\n    this.setState({\n      cardData: {\n        pos,\n        card,\n        cardElement,\n        cardIndex,\n        flip: !this.state.player1,\n        cb: runPlayer2 => {\n          cb(runPlayer2);\n          if (!runPlayer2) return;\n          if (!this.twoPlayers) {\n            this.deck.sendNextCard(\n              this.board.player2.round < 5,\n              this.addCardToPlayer2\n            );\n          } else {\n            \n          if (this.board.gameEnded()) {\n            this.checkWinner();\n          } else {\n            this.setState({\n              player1: !this.state.player1\n            });\n          }\n        }\n          // cb(runPlayer2, this.board.player2.round < 5);\n        }\n      }\n    });\n  }\n  addCardToPlayer2 = (p2Card, cardElement, cardIndex, callback) => {\n    this.setState({\n      p2CardData: {\n        pos: false, card: p2Card, cardElement, cardIndex, flip:true, cb: () => {\n          callback();\n          if (this.board.gameEnded()) {\n            this.checkWinner();\n          }\n        }\n      }\n    });\n  }\n\n  checkWinner=()=>{\n    // need to call this function when last card is placed\n    try{\n      let winner = this.board.winner(); \n      console.log(winner);\n      this.setState({\n        p2Visible: true,\n        winner\n      })\n    } catch(e){\n      if (e.message.indexOf(\"h.qualifiesHigh is not a function\") === -1){\n        console.log(e.message);\n      }\n    } \n    // reveale player 2 hands + results\n    // display winner\n\n  }\n\n  switchPlayers=()=>{\n    if (this.twoPlayers){\n      window.location.search = \"\";\n    } else {\n      window.location.search = \"twoPlayers=true\";\n    }\n  }\n  reset=()=>{\n    this.deck.resetDeck();\n    this.board = new Board();\n    this.player1.reset();\n    this.player2.reset();\n    this.setState({\n      p2Visible: false,\n      winner: null\n    })\n  }\n\n  renderControls(){\n    return (\n      <div className=\"controls-container\">\n        <div>\n          <button\n            className=\"check-button\"\n            name=\"finish\"\n            onClick={this.reset}\n          >\n            New Game\n          </button>\n          <button\n            className=\"check-button\"\n            name=\"finish\"\n            onClick={this.switchPlayers}\n          >\n            Switch to {this.twoPlayers ? \"1 Player\" : \"2 Players\"}\n          </button>\n        </div>\n        <Deck\n          ref={r => (this.deck = r)}\n          player2={!this.state.player1}\n          moveCardToHand={this.moveCardToHand}\n          p2Card={this.addCardToPlayer2}\n        />\n      </div>\n    );\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <div className={\"board\"}>\n          <Player\n            ref={r => (this.player2 = r)}\n            id={1}\n            currentPlayer={!this.state.player1}\n            name={this.board.player2.name}\n            winner={this.state.winner}\n            player={this.board.player2}\n            visible={this.state.p2Visible}\n            ignoreCard={this.twoPlayers && this.state.player1}\n            cardData={\n              this.twoPlayers ? this.state.cardData : this.state.p2CardData\n            }\n          />\n          {this.renderControls()}\n          <Player\n            ref={r => (this.player1 = r)}\n            id={-1}\n            currentPlayer={this.state.player1}\n            name={this.board.player1.name}\n            winner={this.state.winner}\n            player={this.board.player1}\n            visible={!this.twoPlayers}\n            ignoreCard={this.twoPlayers && !this.state.player1}\n            cardData={this.state.cardData}\n          />\n        </div>\n        {/* <button className=\"check-button\" name=\"check\" onClick={this.checkWinner}>Check</button> */}\n        {/* <button className=\"check-button\" style={{ top: \"100px\" }} name=\"finish\" onClick={this.addCardToPlayer2}>Player2</button> */}\n        <div className=\"alert\">\n          <span>Thank you for running this game on landscape</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// {/* hands={[\n//             { cards: [] },\n//             { cards: [] },\n//             { cards: [{ valueString: \"A\", typeString: \"diams\" }] },\n//             { cards: [{ valueString: \"A\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }, { valueString: \"A\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }] },\n//             { cards: [{ valueString: \"A\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }] }\n//           ]} */}\n// {/* hands={[\n//             { cards: [] },\n//             { cards: [] },\n//             { cards: [{ valueString: \"A\", typeString: \"diams\" }] },\n//             { cards: [] },\n//             { cards: [{ valueString: \"A\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }, { valueString: \"A\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }] }\n//           ]} */}\n// {/* <Hand cards={[]} /> */ }\n// {/* <Hand cards={[{ valueString: \"A\", typeString: \"diams\" }]} /> */ }\n// {/* <Hand cards={[{ valueString: \"A\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }]} /> */ }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      console.log(\"service window loaded\");\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n// import { Provider } from 'react-redux';\n// import {store} from './store';\n\nReactDOM.render(\n    <Router>\n        <Route path=\"/\" component={App} />\n    </Router>, document.getElementById('root'));\n// const rootElement = document.getElementById('root')\n// ReactDOM.render(\n//     <Provider store={store}>\n//         <App />\n//     </Provider>,\n//     rootElement\n// )\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}