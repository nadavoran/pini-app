{"version":3,"sources":["componnents/Card.js","componnents/Hand.js","componnents/Player.js","componnents/Deck.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","onMouseDown","e","document","addEventListener","moveCard","stopListen","touches","stopPropagation","preventDefault","setState","visible","animate","state","rel","x","pageX","pos","y","pageY","removeEventListener","changedTouches","mouseUp","card","index","animationEnd","type","this","classList","add","remove","val","className","style","Object","assign","left","top","color","ref","r","onTouchStart","onAnimationEnd","value","getSymbol","React","Component","Hand","cards","cardElement","posGoal","cardIndex","forced","hand","addCard","getCenterX","width","getCenterY","height","onCardMoveEnd","animationName","clearTimer","window","clearTimeout","resolve","handPos","getPos","Math","min","cardCount","timer","max","sqrt","setProperty","setTimeout","transform","Promise","reject","innerWidth","getBoundingClientRect","visibleLastCard","length","solved","name","round","map","key","toString","valueString","typeString","renderHand","Player","hands","prevProps","prevState","snapshot","cardData","cardPos","cardRealPos","i","player","then","cb","addedPromises","bottom","right","all","results","result","some","catch","console","log","forEach","reset","currentPlayer","winner","id","CardData","require","Deck","releaseCard","moveCardToHand","success","p2Card","element","lastCardIndex","showCard","createCards","shuffle","res","VALUES","TYPES","push","array","sort","random","mouseEvent","Board","App","runPlayer2","board","player2","addCardToPlayer2","callback","p2CardData","gameEnded","checkWinner","p2Visible","message","indexOf","deck","resetDeck","player1","onClick","Boolean","location","hostname","match","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f03c4263.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nclass Card extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            pos: {\r\n                x: 0,\r\n                y: 0\r\n            }\r\n        }\r\n    }\r\n\r\n    getSymbol(type){\r\n        switch (type){\r\n            case \"hearts\":\r\n                return \"♥\";\r\n            case \"clubs\":\r\n                return \"♣\";\r\n            case \"spades\":\r\n                return \"♠\";\r\n            case \"diams\":\r\n                return \"♦\";\r\n            default: \r\n                return \"No\"\r\n        }\r\n    }\r\n    onMouseDown=(e)=>{\r\n        if (!this.props.onMouseDown) return;\r\n        // let pos = this.card.getBoundingClientRect();\r\n        document.addEventListener(\"mousemove\", this.moveCard);\r\n        document.addEventListener(\"mouseup\", this.stopListen);\r\n        document.addEventListener(\"touchmove\", this.moveCard);\r\n        document.addEventListener(\"touchend\", this.stopListen);\r\n        if (e.touches){\r\n            e = e.touches[0];\r\n        } else {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n        }\r\n        // console.log(\"stratX: \", e.pageX - pos.left)\r\n        this.setState({\r\n            visible: true,\r\n            // dragging: true,\r\n            animate: !this.state.visible,\r\n            rel: {\r\n                x: e.pageX - this.state.pos.x,\r\n                y: e.pageY - this.state.pos.y   \r\n            } });\r\n    }\r\n    moveCard = (e) => {\r\n        if (e.touches){\r\n            e = e.touches[0];\r\n        } else {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n        }\r\n        this.setState({\r\n            pos: {\r\n                x: e.pageX - this.state.rel.x,\r\n                y: e.pageY - this.state.rel.y\r\n            }\r\n        })\r\n    }\r\n    stopListen=(e)=>{\r\n        document.removeEventListener(\"mouseup\", this.stopListen);\r\n        document.removeEventListener(\"mousemove\", this.moveCard);\r\n        document.removeEventListener(\"touchend\", this.stopListen);\r\n        document.removeEventListener(\"touchmove\", this.moveCard);\r\n        e = e.touches ? e.changedTouches[0] : e;\r\n        this.props.mouseUp && this.props.mouseUp({\r\n            x: e.pageX,\r\n            y: e.pageY\r\n        }, this.props.card, this.card, this.props.index);\r\n    }\r\n    animationEnd = () => {\r\n        this.setState({\r\n            animate: false\r\n        });\r\n    }\r\n    showCard() {\r\n        this.card.classList.add(\"animate\");\r\n        this.card.classList.remove(\"hidden\");\r\n    }\r\n    \r\n    get element(){\r\n        return this.card;\r\n    }\r\n    renderCorner(val, type, pos) {\r\n        return <div className={\"small \"+pos}>\r\n            <div className=\"small-number\">{val}</div>\r\n            <div className=\"small-symbol\">{type}</div>\r\n        </div>\r\n    }\r\n    render() {\r\n        let visible = \"card-container\" + (this.props.visible || this.state.visible ? \"\" : \" hidden\") + (this.state.animate? \" animate\" : \"\");\r\n        let style = Object.assign({\r\n            left: this.state.pos.x + \"px\",\r\n            top: this.state.pos.y + \"px\",\r\n            color: this.props.card.color === \"r\" ? \"#d12d36\" : \"#333\"\r\n        }, \r\n            this.props.style);\r\n        return (\r\n            <div ref={((r) => this.card = r)} className={visible} style={style} onTouchStart={this.onMouseDown} onMouseDown={this.onMouseDown} onAnimationEnd={this.animationEnd}>\r\n                <div className=\"side front\">\r\n                    {/* {this.renderCorner(this.props.value, this.getSymbol(this.props.type), \"top\")} */}\r\n                    <div className={\"small top\"}>\r\n                        <div className=\"small-number\">{this.props.value}</div>\r\n                        <div className=\"small-symbol\">{this.getSymbol(this.props.type)}</div>\r\n                    </div>\r\n                    <div className=\"middle\"><div>{this.props.value}</div></div>\r\n                    {/* {this.renderCorner(this.props.value, this.getSymbol(this.props.type), \"bottom\")} */}\r\n                    <div className={\"small bottom\"}>\r\n                        <div className=\"small-number\">{this.props.value}</div>\r\n                        <div className=\"small-symbol\">{this.getSymbol(this.props.type)}</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"side back\"></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Card;\r\n\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nimport './Hand.css';\r\n\r\nclass Hand extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            cards: []\r\n        }\r\n    }\r\n    componentDidMount(){\r\n    }\r\n    addCard(card, cardElement, posGoal, cardIndex, forced) {\r\n        // let cards = [...this.state.cards];\r\n        if (this.props.hand.addCard(card) || forced) {\r\n            function getCenterX(pos) {\r\n                return pos.x + (pos.width / 2);\r\n            }\r\n            function getCenterY(pos) {\r\n                return pos.y + (pos.height / 2);\r\n            }\r\n            // cards.push(card);\r\n            // pos goal shold be the transform = translate3d(posGoal.x+\"px\", posGoal.y + \"px\", 10px )\r\n            let onCardMoveEnd = (e)=>{\r\n                if (e.animationName === \"trans-animate\"){\r\n                    clearTimer && window.clearTimeout(clearTimer);\r\n                    cardElement.classList.remove(\"trans-animate\");\r\n                    cardElement.removeEventListener(\"animattionend\", onCardMoveEnd);\r\n                    this.resolve(true);\r\n                    this.setState({ cards: [...this.props.hand.cards] });\r\n                }\r\n            }\r\n            cardElement.addEventListener(\"animationend\", onCardMoveEnd);\r\n            // cardElement\r\n            let handPos = this.getPos();\r\n            let x = getCenterX(handPos) - getCenterX(posGoal);\r\n            let y = getCenterY(handPos) - getCenterY(posGoal) + (Math.min(handPos.height, handPos.width) * 0.29 * this.cardCount);\r\n            let timer = Math.max(300, Math.sqrt(x) * 2 + 350);\r\n            cardElement.style.setProperty(\"--tran-time\", timer + \"ms\");\r\n            let clearTimer = window.setTimeout(() => {\r\n                onCardMoveEnd({ animationName: \"trans-animate\" })\r\n            }, timer);\r\n            cardElement.classList.add(\"trans-animate\");\r\n            cardElement.style.transform = `translate3d(${x - 1 - (0.25 * cardIndex)}px, ${y - (0.25 * cardIndex)}px, 10px)`;\r\n            return new Promise((resolve, reject)=>{\r\n                this.resolve = resolve;\r\n            });\r\n        }\r\n        return Promise.resolve(false);\r\n    }\r\n    reset(){\r\n        this.setState({ \r\n            cards: []\r\n        });\r\n    }\r\n    calcSpace(){\r\n        return Math.min(window.innerWidth * 0.05, 35);\r\n    }\r\n    get cardCount(){\r\n        return this.state.cards.length;\r\n    }\r\n    getPos(){\r\n        return this.hand.getBoundingClientRect();\r\n    }\r\n    renderHand(){\r\n        if (this.props.visibleLastCard && this.state.cards.length === 5 ){\r\n            return <div className=\"hand-result\">{this.props.hand.solved.name}</div>\r\n        }\r\n    }\r\n    render(){\r\n        let style= {\r\n            \"borderColor\": this.props.round > this.state.cards.length ? \"green\" : \"red\"    \r\n        }\r\n        return <div ref={(r) => this.hand = r} style={style} className=\"hand-container\">\r\n            {this.state.cards.map((card, index)=>{\r\n                let transform = `translateY(${30  * index}%`;\r\n                let visible = this.props.visibleLastCard || index < 4;\r\n                return <Card card={card} key={card.toString() + index} index={index} value={card.valueString} type={card.typeString} style={{ transform }} visible={visible} />\r\n            })}\r\n            {this.renderHand()}\r\n        </div>      \r\n    }\r\n}\r\n\r\nexport default Hand;","import React from 'react';\r\nimport Hand from './Hand';\r\n\r\nimport './Player.css';\r\n\r\nclass Player extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            hands: [\r\n                { },\r\n                { },\r\n                { },\r\n                { },\r\n                { }\r\n            ]\r\n        };\r\n        this.hands = [];\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot){\r\n        if (prevProps.cardData !== this.props.cardData){\r\n            let cardPos = this.props.cardData.pos;\r\n            let cardRealPos = this.props.cardData.cardElement.getBoundingClientRect();\r\n            if (!cardPos){\r\n                // player 2 add card\r\n                let i = 0;\r\n                while (!this.props.player.addCard(this.props.cardData.card, i) && i< 5){\r\n                    i += 1;\r\n                }\r\n                // let handPos = this.hands[i].getPos();\r\n                // let x = getCenterX(handPos) - getCenterX(cardRealPos);\r\n                // let y = getCenterY(handPos) - getCenterY(cardRealPos) + (35 * (this.hands[i].cardCount));\r\n                this.hands[i].addCard(this.props.cardData.card, this.props.cardData.cardElement, cardRealPos, this.props.cardData.cardIndex, true).then(this.props.cardData.cb);\r\n                return;\r\n            }\r\n\r\n            let addedPromises = this.hands.map((hand, index) => {\r\n                let handPos = hand.getPos();\r\n                // console.log(`cb:${cardPos.x} > ht:${handPos.top} && ct:${cardPos.top} < hb:${handPos.height + handPos.top} &&\r\n                //     cl:${cardPos.left} < hr:${handPos.right} && cr:${cardPos.right} > hl:${handPos.left}`);\r\n                if (cardPos.y > handPos.top && cardPos.y < handPos.bottom &&\r\n                    cardPos.x < handPos.right && cardPos.x > handPos.left &&\r\n                    this.props.player.round > hand.cardCount) {\r\n                    let forced = this.props.player.addCard(this.props.cardData.card, index);\r\n                    // let x = getCenterX(handPos) - getCenterX(cardRealPos) + 1;\r\n                    // let y = getCenterY(handPos) - getCenterY(cardRealPos) - (35 * (hand.cardCount) + 1);\r\n                    return hand.addCard(this.props.cardData.card, this.props.cardData.cardElement, cardRealPos, this.props.cardData.cardIndex, forced);\r\n                    // let hands = [...this.state.hands];\r\n                    // hands[index].cards.push(this.props.cardData.card);\r\n                    // this.setState({hands});\r\n                }\r\n                return Promise.resolve(false);\r\n            });\r\n            Promise.all(addedPromises).then(results=>{\r\n                let result = results.some((result) => result);\r\n                this.props.cardData.cb(result);\r\n            }).catch(e=>{\r\n                console.log(e);\r\n            })\r\n            // this.props.cardData.cb(this.hands.some((hand, index) => {\r\n            //     let handPos = hand.getPos();\r\n            //     // console.log(`cb:${cardPos.x} > ht:${handPos.top} && ct:${cardPos.top} < hb:${handPos.height + handPos.top} &&\r\n            //     //     cl:${cardPos.left} < hr:${handPos.right} && cr:${cardPos.right} > hl:${handPos.left}`);\r\n            //     if (cardPos.y > handPos.top && cardPos.y < handPos.bottom &&\r\n            //       cardPos.x < handPos.right && cardPos.x > handPos.left && \r\n            //         this.props.player.round > hand.cardCount) \r\n            //       {\r\n            //         let forced = this.props.player.addCard(this.props.cardData.card, index);\r\n            //         let x = getCenterX(handPos) - getCenterX(cardRealPos);\r\n            //         let y = getCenterY(handPos) - getCenterY(cardRealPos) + (35 * (hand.cardCount - 1));\r\n            //         return hand.addCard(this.props.cardData.card, this.props.cardData.cardElement, { x, y }, forced);\r\n            //         // let hands = [...this.state.hands];\r\n            //         // hands[index].cards.push(this.props.cardData.card);\r\n            //         // this.setState({hands});\r\n            //     }\r\n            //     return false;\r\n            // }));\r\n        }\r\n    }\r\n    reset(){\r\n        this.hands.forEach(hand=>{\r\n            hand.reset();\r\n        })\r\n    }\r\n    render() {\r\n        return <div className=\"player-container\">\r\n            { this.props.player.hands.map((hand, index) => {\r\n                return <Hand ref={(r)=>{\r\n                    this.hands[index] = r;\r\n                }} key={this.props.name+index} round={this.props.player.round} hand={hand} visibleLastCard={this.props.currentPlayer || this.props.winner} />\r\n            })\r\n            }\r\n            {this.props.winner && this.props.winner === this.props.id ? (<div className=\"winner-banner\">WINNER</div>): null}\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Player;","import React from 'react';\r\nimport Card from './Card';\r\n// import { CardData } from 'pini';\r\n\r\nimport './Deck.css';\r\n\r\nconst { CardData }= require('pini');\r\n\r\nclass Deck extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        let cards = this.createCards();\r\n        this.state = {\r\n            cards: this.shuffle(cards),\r\n            lastCardIndex: cards.length\r\n        }\r\n        this.cards = [];\r\n    }\r\n    createCards(){\r\n        let res = [];\r\n        CardData.VALUES.forEach((value, index) => {\r\n            if (!index) return;\r\n            CardData.TYPES.forEach(type => {\r\n                res.push(new CardData.Card(value, type));\r\n            }); \r\n        });\r\n        return res;\r\n    }\r\n    shuffle(array) {\r\n        return array.sort(() => Math.random() - 0.5);\r\n    }\r\n    releaseCard = (pos, card, cardElement, cardIndex)=>{\r\n        this.props.moveCardToHand(pos, card, cardElement, cardIndex, (success, visible) => {\r\n            if (success) {\r\n                // remove current card and add card for p2\r\n                // Promise.resolve(1).then(()=>{\r\n                // this.props.p2Card(this.state.cards[--cardIndex], cardElement);\r\n                cardIndex -= 1;\r\n                this.props.p2Card(this.state.cards[cardIndex], this.cards[cardIndex].element, cardIndex, ()=>{\r\n                        Promise.resolve(1).then(()=>this.setState({ lastCardIndex: cardIndex }));\r\n                    });\r\n                // visible && this.cards[cardIndex].showCard();\r\n                visible && Promise.resolve(1).then(()=>this.cards[cardIndex].showCard());\r\n                // });\r\n            }\r\n        });\r\n    }\r\n\r\n    resetDeck(){\r\n        this.setState({\r\n            cards: this.shuffle(this.state.cards),\r\n            lastCardIndex: this.state.cards.length\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"deck-container\">\r\n            {this.state.cards.map((card, index) => {\r\n                let transform = `translate(-${0.25 * index}px, -${0.25 * index}px)`;\r\n                if (index < this.state.lastCardIndex){\r\n                    let mouseEvent = index === this.state.lastCardIndex - 1;\r\n                    return <Card ref={(r) => r && (\r\n                            this.cards[index] = r)} card={card} key={card.toString() + index} style={{ transform}} index={index} value={card.valueString} type={card.typeString} onMouseDown={mouseEvent} mouseUp={this.releaseCard} />\r\n                }\r\n                return null;\r\n            })}\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Deck;","import React from 'react';\nimport './App.css';\nimport Player from './componnents/Player';\nimport Deck from './componnents/Deck';\nimport './reponsive.css';\n\nconst { Board } = require('pini');\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={};\n    this.board = new Board();\n  }\n\n  moveCardToHand = (pos, card, cardElement, cardIndex, cb)=>{\n    this.setState({\n      cardData:{\n        pos, card, cardElement, cardIndex, cb:(runPlayer2)=>{\n\n          cb(runPlayer2, this.board.player2.round < 5);\n        }\n      }\n    });\n  }\n  addCardToPlayer2 = (p2Card, cardElement, cardIndex, callback) => {\n    this.setState({\n      p2CardData: {\n        pos: false, card: p2Card, cardElement, cardIndex, cb: () => {\n          callback();\n          if (this.board.gameEnded()) {\n            this.checkWinner();\n          }\n        }\n      }\n    });\n  }\n\n  checkWinner=()=>{\n    // need to call this function when last card is placed\n    try{\n      let winner = this.board.winner(); \n      console.log(winner);\n      this.setState({\n        p2Visible: true,\n        winner\n      })\n    } catch(e){\n      if (e.message.indexOf(\"h.qualifiesHigh is not a function\") === -1){\n        console.log(e.message);\n      }\n    } \n    // reveale player 2 hands + results\n    // display winner\n\n  }\n  reset=()=>{\n    this.deck.resetDeck();\n    this.board = new Board();\n    this.player1.reset();\n    this.player2.reset();\n    this.setState({\n      p2Visible: false,\n      winner: null\n    })\n  }\n\n  render(){\n    return (  \n      <div className=\"App\">\n        <div className=\"board\">\n          <Player ref={(r) => this.player1 = r} currentPlayer id={1} winner={this.state.winner} player={this.board.player1} cardData={this.state.cardData} name=\"Player1\" />\n          <Player ref={(r) => this.player2 = r} name=\"Player2\" id={-1} winner={this.state.winner} visible={this.state.p2Visible} cardData={this.state.p2CardData} player={this.board.player2} />\n        </div>\n        <Deck ref={(r) => this.deck = r} moveCardToHand={this.moveCardToHand} p2Card={this.addCardToPlayer2} />\n        <button className=\"check-button\" name=\"finish\" onClick={this.reset}>New Game</button>\n        {/* <button className=\"check-button\" name=\"check\" onClick={this.checkWinner}>Check</button> */}\n        {/* <button className=\"check-button\" style={{ top: \"100px\" }} name=\"finish\" onClick={this.addCardToPlayer2}>Player2</button> */}\n        <div className=\"alert\">\n          <span>Thank you for running this game on landscape</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// {/* hands={[\n//             { cards: [] },\n//             { cards: [] },\n//             { cards: [{ valueString: \"A\", typeString: \"diams\" }] },\n//             { cards: [{ valueString: \"A\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }, { valueString: \"A\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }] },\n//             { cards: [{ valueString: \"A\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }] }\n//           ]} */}\n// {/* hands={[\n//             { cards: [] },\n//             { cards: [] },\n//             { cards: [{ valueString: \"A\", typeString: \"diams\" }] },\n//             { cards: [] },\n//             { cards: [{ valueString: \"A\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }, { valueString: \"A\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }] }\n//           ]} */}\n// {/* <Hand cards={[]} /> */ }\n// {/* <Hand cards={[{ valueString: \"A\", typeString: \"diams\" }]} /> */ }\n// {/* <Hand cards={[{ valueString: \"A\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }]} /> */ }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      console.log(\"service window loaded\");\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import { Provider } from 'react-redux';\n// import {store} from './store';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// const rootElement = document.getElementById('root')\n// ReactDOM.render(\n//     <Provider store={store}>\n//         <App />\n//     </Provider>,\n//     rootElement\n// )\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.register();\n"],"sourceRoot":""}