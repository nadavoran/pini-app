{"version":3,"sources":["componnents/Card.js","componnents/Hand.js","componnents/Player.js","componnents/Deck.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","onMouseDown","e","pos","card","getBoundingClientRect","document","addEventListener","moveCard","stopListen","touches","stopPropagation","preventDefault","setState","visible","animate","state","rel","x","pageX","y","pageY","leftEdge","topEdge","rightEdge","window","innerWidth","width","bottomEdge","innerHeight","height","Math","max","min","removeEventListener","changedTouches","mouseUp","index","animationEnd","type","this","classList","add","remove","val","className","style","Object","assign","left","top","color","rotate","transform","includes","ref","r","onTouchStart","onAnimationEnd","value","getSymbol","React","Component","Hand","cards","cardElement","posGoal","flip","forced","hand","addCard","getCenterX","getCenterY","onCardMoveEnd","animationName","clearTimer","clearTimeout","resolve","flipAnimate","fixSpace","handPos","getPos","cardCount","timer","sqrt","abs","setProperty","setTimeout","Promise","reject","visibleLastCard","length","solved","name","round","map","key","toString","valueString","typeString","renderHand","Player","modifyName","player","target","hands","prevProps","prevState","snapshot","cardData","cardPos","cardRealPos","ignoreCard","i","then","cb","addedPromises","bottom","right","all","results","result","some","catch","console","log","forEach","reset","winner","id","currentPlayer","onChange","twoPlayers","CardData","require","Deck","releaseCard","cardIndex","moveCardToHand","success","lastCardIndex","createCards","shuffle","res","VALUES","TYPES","push","array","sort","random","animateFlip","cb2","element","showCard","mouseEvent","player2","Board","App","dealFirstRound","board","deck","sendNextCard","player1","firstRound","runPlayer2","gameEnded","checkWinner","addCardToPlayer2","p2Card","callback","p2CardData","p2Visible","message","indexOf","switchPlayers","resetDeck","location","search","onClick","checked","uncheckedIcon","checkedIcon","onColor","renderControls","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","path","component","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.daabbeb9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nclass Card extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      pos: {\r\n        x: props.x,\r\n        y: props.y\r\n      }\r\n    };\r\n  }\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (!state.x) {\r\n      return {\r\n        x: props.x,\r\n        y: props.y\r\n      };\r\n    }\r\n\r\n    // Return null to indicate no change to state.\r\n    return null;\r\n  }\r\n\r\n  getSymbol(type) {\r\n    switch (type) {\r\n      case \"hearts\":\r\n        return \"♥\";\r\n      case \"clubs\":\r\n        return \"♣\";\r\n      case \"spades\":\r\n        return \"♠\";\r\n      case \"diams\":\r\n        return \"♦\";\r\n      default:\r\n        return \"No\";\r\n    }\r\n  }\r\n  onMouseDown = e => {\r\n    if (!this.props.onMouseDown) return;\r\n    let pos = this.card.getBoundingClientRect();\r\n    document.addEventListener(\"mousemove\", this.moveCard);\r\n    document.addEventListener(\"mouseup\", this.stopListen);\r\n    document.addEventListener(\"touchmove\", this.moveCard);\r\n    document.addEventListener(\"touchend\", this.stopListen);\r\n    if (e.touches) {\r\n      e = e.touches[0];\r\n    } else {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n    }\r\n    this.setState({\r\n      visible: true,\r\n      // dragging: true,\r\n      animate: !this.state.visible,\r\n      rel: {\r\n        x: e.pageX - this.state.pos.x,\r\n        y: e.pageY - this.state.pos.y,\r\n        leftEdge: e.pageX - pos.x,\r\n        topEdge: e.pageY - pos.y,\r\n        rightEdge: window.innerWidth - pos.width + (e.pageX - pos.x),\r\n        bottomEdge: window.innerHeight - pos.height + (e.pageY - pos.y)\r\n      }\r\n    });\r\n  };\r\n  moveCard = e => {\r\n    if (e.touches) {\r\n      e = e.touches[0];\r\n    } else {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n    }\r\n    let x = e.pageX - this.state.rel.x;\r\n    if (x < 0) {\r\n      x = Math.max(this.state.rel.leftEdge, e.pageX) - this.state.rel.x;\r\n    } else {\r\n      x = Math.min(this.state.rel.rightEdge, e.pageX) - this.state.rel.x;\r\n    }\r\n    let y = e.pageY - this.state.rel.y;\r\n    if (y < 0) {\r\n      y = Math.max(this.state.rel.topEdge, e.pageY) - this.state.rel.y;\r\n    } else {\r\n      y = Math.min(this.state.rel.bottomEdge, e.pageY) - this.state.rel.y;\r\n    }\r\n    this.setState({\r\n      pos: {\r\n        x: x,\r\n        y: y\r\n      }\r\n    });\r\n  };\r\n  stopListen = e => {\r\n    document.removeEventListener(\"mouseup\", this.stopListen);\r\n    document.removeEventListener(\"mousemove\", this.moveCard);\r\n    document.removeEventListener(\"touchend\", this.stopListen);\r\n    document.removeEventListener(\"touchmove\", this.moveCard);\r\n    e = e.touches ? e.changedTouches[0] : e;\r\n    this.props.mouseUp &&\r\n      this.props.mouseUp(\r\n        {\r\n          x: e.pageX,\r\n          y: e.pageY\r\n        },\r\n        this.props.card,\r\n        this.card,\r\n        this.props.index\r\n      );\r\n  };\r\n  animationEnd = () => {\r\n    this.setState({\r\n      animate: false\r\n    });\r\n  };\r\n  showCard() {\r\n    // this.card.addEventListener(\"animationend\", () => {\r\n    //   console.log(\"show animation end\");\r\n    // });\r\n    this.card.classList.add(\"animate\");\r\n    this.card.classList.remove(\"hidden\");\r\n  }\r\n\r\n  get element() {\r\n    return this.card;\r\n  }\r\n  renderCorner(val, type, pos) {\r\n    return (\r\n      <div className={\"small \" + pos}>\r\n        <div className=\"small-number\">{val}</div>\r\n        <div className=\"small-symbol\">{type}</div>\r\n      </div>\r\n    );\r\n  }\r\n  render() {\r\n    let visible =\r\n      \"card-container\" +\r\n      (this.props.visible || this.state.visible ? \"\" : \" hidden\") +\r\n      (this.state.animate ? \" animate\" : \"\");\r\n    let style = Object.assign(\r\n      {\r\n        // left: this.state.pos.x ? this.state.pos.x + \"px\" : \"initial\",\r\n        // top: this.state.pos.y ? this.state.pos.y + \"px\" : \"initial\",\r\n        left: this.state.pos.x + \"px\",\r\n        top: this.state.pos.y + \"px\",\r\n        color: this.props.card.color === \"r\" ? \"#d12d36\" : \"#333\"\r\n        // transform\r\n      },\r\n      this.props.style\r\n    );\r\n    if (this.props.rotate){\r\n        if (!style.transform){\r\n            style.transform = \"rotate(180deg)\";\r\n        } else if (!style.transform.includes(\"rotate(180deg)\")){\r\n        style.transform += \" rotate(180deg)\";\r\n        }\r\n    }\r\n    return (\r\n      <div\r\n        ref={r => (this.card = r)}\r\n        className={visible}\r\n        style={style}\r\n        onTouchStart={this.onMouseDown}\r\n        onMouseDown={this.onMouseDown}\r\n        onAnimationEnd={this.animationEnd}\r\n      >\r\n        <div className=\"side front\">\r\n          {/* {this.renderCorner(this.props.value, this.getSymbol(this.props.type), \"top\")} */}\r\n          <div className={\"small top\"}>\r\n            <div className=\"small-number\">{this.props.value}</div>\r\n            <div className=\"small-symbol\">\r\n              {this.getSymbol(this.props.type)}\r\n            </div>\r\n          </div>\r\n          <div className=\"middle\">\r\n            <div>{this.props.value}</div>\r\n          </div>\r\n          {/* {this.renderCorner(this.props.value, this.getSymbol(this.props.type), \"bottom\")} */}\r\n          <div className={\"small bottom\"}>\r\n            <div className=\"small-number\">{this.props.value}</div>\r\n            <div className=\"small-symbol\">\r\n              {this.getSymbol(this.props.type)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"side back\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nimport './Hand.css';\r\n\r\nclass Hand extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            cards: []\r\n        }\r\n    }\r\n    componentDidMount(){\r\n    }\r\n    addCard(card, cardElement, posGoal, flip, forced) {\r\n        // let cards = [...this.state.cards];\r\n        if (this.props.hand.addCard(card) || forced) {\r\n            function getCenterX(pos) {\r\n                return pos.x + (pos.width / 2);\r\n            }\r\n            function getCenterY(pos) {\r\n                return pos.y + (pos.height / 2);\r\n            }\r\n            // cards.push(card);\r\n            // pos goal shold be the transform = translate3d(posGoal.x+\"px\", posGoal.y + \"px\", 10px )\r\n            let onCardMoveEnd = (e)=>{\r\n                if (e.animationName === \"trans-animate\"){\r\n                    clearTimer && window.clearTimeout(clearTimer);\r\n                    cardElement.classList.remove(\"trans-animate\");\r\n                    cardElement.removeEventListener(\"animattionend\", onCardMoveEnd);\r\n                    this.resolve(true);\r\n                    this.setState({ cards: [...this.props.hand.cards] });\r\n                }\r\n            }\r\n            cardElement.addEventListener(\"animationend\", onCardMoveEnd);\r\n            // cardElement\r\n            let flipAnimate = \"\";\r\n            let fixSpace = 0.28;\r\n            if (flip) {\r\n              flipAnimate = \"rotate(180deg)\";\r\n              fixSpace *= -1;\r\n            } \r\n            let handPos = this.getPos();\r\n            let x = getCenterX(handPos) - getCenterX(posGoal);\r\n            let y =\r\n              getCenterY(handPos) -\r\n              getCenterY(posGoal) +\r\n              posGoal.height * fixSpace * this.cardCount;\r\n            let timer = Math.max(300, Math.sqrt(Math.abs(y)) * 2 + 350);\r\n            cardElement.style.setProperty(\"--tran-time\", timer + \"ms\");\r\n            let clearTimer = window.setTimeout(() => {\r\n                onCardMoveEnd({ animationName: \"trans-animate\" })\r\n            }, timer);\r\n            cardElement.classList.add(\"trans-animate\");\r\n                // y = y - 0.25 * cardIndex;\r\n            // cardElement.style.transform = `translate3d(${x - (0.25 * cardIndex)}px, ${y}px, 10px) ${this.props.twoPlayers ? \" rotate(180deg)\" : \"\"}`;\r\n            cardElement.style.transform = `translate3d(${x}px, ${y}px, 10px) ${flipAnimate}`;\r\n            return new Promise((resolve, reject)=>{\r\n                this.resolve = resolve;\r\n            });\r\n        }\r\n        return Promise.resolve(false);\r\n    }\r\n    reset(){\r\n        this.setState({ \r\n            cards: []\r\n        });\r\n    }\r\n    calcSpace(){\r\n        return Math.min(window.innerWidth * 0.05, 35);\r\n    }\r\n    get cardCount(){\r\n        return this.state.cards.length;\r\n    }\r\n    getPos(){\r\n        return this.hand.getBoundingClientRect();\r\n    }\r\n    renderHand(){\r\n        if (this.props.visibleLastCard && this.state.cards.length === 5 ){\r\n            return <div className=\"hand-result\">{this.props.hand.solved.name}</div>\r\n        }\r\n    }\r\n    render(){\r\n        let style= {\r\n            \"borderColor\": this.props.round > this.state.cards.length ? \"green\" : \"red\"    \r\n        }\r\n        return <div ref={(r) => this.hand = r} style={style} className=\"hand-container\">\r\n            {this.state.cards.map((card, index)=>{\r\n                let transform = `translateY(${28 * index}%)`;\r\n                let visible = this.props.visibleLastCard || index < 4;\r\n                return <Card card={card} key={card.toString() + index} index={index} value={card.valueString} type={card.typeString} style={{ transform }} visible={visible} />\r\n            })}\r\n            {this.renderHand()}\r\n        </div>      \r\n    }\r\n}\r\n\r\nexport default Hand;","import React from 'react';\r\nimport Hand from './Hand';\r\n\r\nimport './Player.css';\r\n\r\nclass Player extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hands: [{}, {}, {}, {}, {}]\r\n    };\r\n    this.hands = [];\r\n  }\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (!state.name) {\r\n      return {\r\n          name: props.name\r\n      };\r\n    }\r\n\r\n    // Return null to indicate no change to state.\r\n    return null;\r\n  }\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (this.props.cardData && prevProps.cardData !== this.props.cardData) {\r\n      let cardPos = this.props.cardData.pos;\r\n      let cardRealPos = this.props.cardData.cardElement.getBoundingClientRect();\r\n      if (this.props.ignoreCard) return false;\r\n      if (!cardPos) {\r\n        // player 2 add card\r\n        let i = 0;\r\n        while (\r\n          !this.props.player.addCard(this.props.cardData.card, i) &&\r\n          i < 5\r\n        ) {\r\n          i += 1;\r\n        }\r\n        this.hands[i]\r\n          .addCard(\r\n            this.props.cardData.card,\r\n            this.props.cardData.cardElement,\r\n            cardRealPos,\r\n            this.props.cardData.flip,\r\n            true\r\n          )\r\n          .then(this.props.cardData.cb);\r\n        return;\r\n      }\r\n\r\n      let addedPromises = this.hands.map((hand, index) => {\r\n        let handPos = hand.getPos();\r\n        // console.log(`cb:${cardPos.x} > ht:${handPos.top} && ct:${cardPos.top} < hb:${handPos.height + handPos.top} &&\r\n        //     cl:${cardPos.left} < hr:${handPos.right} && cr:${cardPos.right} > hl:${handPos.left}`);\r\n        if (\r\n          cardPos.y > handPos.top &&\r\n          cardPos.y < handPos.bottom &&\r\n          cardPos.x < handPos.right &&\r\n          cardPos.x > handPos.left &&\r\n          this.props.player.round > hand.cardCount\r\n        ) {\r\n          let forced = this.props.player.addCard(\r\n            this.props.cardData.card,\r\n            index\r\n          );\r\n          return hand.addCard(\r\n            this.props.cardData.card,\r\n            this.props.cardData.cardElement,\r\n            cardRealPos,\r\n            this.props.cardData.flip,\r\n            forced\r\n          );\r\n        }\r\n        return Promise.resolve(false);\r\n      });\r\n      Promise.all(addedPromises)\r\n        .then(results => {\r\n          let result = results.some(result => result);\r\n          this.props.cardData.cb(result);\r\n        })\r\n        .catch(e => {\r\n          console.log(e);\r\n        });\r\n    }\r\n  }\r\n  modifyName = e => {\r\n    this.props.player.name = e.target.value;\r\n    this.setState({\r\n      name: this.props.player.name\r\n    });\r\n  };\r\n  reset() {\r\n    this.hands.forEach(hand => {\r\n      hand.reset();\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"player-container\">\r\n        <div\r\n          className={\r\n            \"player-name\" +\r\n            ((this.props.winner &&\r\n            this.props.winner === this.props.id) ||\r\n            (!this.props.winner && this.props.currentPlayer)\r\n              ? \" active\"\r\n              : \"\")\r\n          }\r\n        >\r\n          <div>{this.state.name}</div>\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.name}\r\n            onChange={this.modifyName}\r\n          />\r\n        </div>\r\n        <div className=\"hands-container\">\r\n          {this.props.player.hands.map((hand, index) => {\r\n            return (\r\n              <Hand\r\n                ref={r => {\r\n                  this.hands[index] = r;\r\n                }}\r\n                twoPlayers={this.props.twoPlayers}\r\n                key={this.props.name + index}\r\n                round={this.props.player.round}\r\n                hand={hand}\r\n                visibleLastCard={this.props.visible || this.props.winner}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n        {this.props.winner && this.props.winner === this.props.id ? (\r\n          <div className=\"winner-banner\">WINNER</div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Player;","import React from \"react\";\r\nimport Card from \"./Card\";\r\n// import { CardData } from 'pini';\r\n\r\nimport \"./Deck.css\";\r\n\r\nconst { CardData } = require(\"pini\");\r\n\r\nclass Deck extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    let cards = this.createCards();\r\n    this.state = {\r\n      cards: this.shuffle(cards),\r\n      lastCardIndex: cards.length\r\n    };\r\n    this.cards = [];\r\n  }\r\n  createCards() {\r\n    let res = [];\r\n    CardData.VALUES.forEach((value, index) => {\r\n      if (!index) return;\r\n      CardData.TYPES.forEach(type => {\r\n        res.push(new CardData.Card(value, type));\r\n      });\r\n    });\r\n    return res;\r\n  }\r\n  shuffle(array) {\r\n    return array.sort(() => Math.random() - 0.5);\r\n  }\r\n  sendNextCard(animateFlip, cb = () => {}, cb2 = ()=>{}) {\r\n    let cardIndex = this.state.lastCardIndex - 1;\r\n    cb(\r\n      this.state.cards[cardIndex],\r\n      this.cards[cardIndex].element,\r\n      cardIndex,\r\n      () => {\r\n        // Promise.resolve(1).then(() => this.setState({ lastCardIndex: cardIndex }, cb2)\r\n        this.setState({ lastCardIndex: cardIndex }, cb2);\r\n      }\r\n    );\r\n    animateFlip && this.cards[cardIndex].showCard();\r\n    // cb2();\r\n    // animateFlip && Promise.resolve(1).then(() => this.cards[cardIndex].showCard());\r\n  }\r\n  releaseCard = (pos, card, cardElement, cardIndex) => {\r\n    this.props.moveCardToHand(\r\n      pos,\r\n      card,\r\n      cardElement,\r\n      cardIndex,\r\n      (success, visible) => {\r\n        if (success) {\r\n          // remove current card and add card for p2\r\n          // Promise.resolve(1).then(()=>{\r\n          // this.props.p2Card(this.state.cards[--cardIndex], cardElement);\r\n          // cardIndex -= 1;\r\n          // this.props.p2Card(this.state.cards[cardIndex], this.cards[cardIndex].element, cardIndex, ()=>{\r\n          // Promise.resolve(1).then(()=>this.setState({ lastCardIndex: cardIndex }));\r\n          this.setState({ lastCardIndex: cardIndex });\r\n          // });\r\n          // visible && this.cards[cardIndex].showCard();\r\n          // visible && Promise.resolve(1).then(()=>this.cards[cardIndex].showCard());\r\n          // });\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  resetDeck() {\r\n    this.setState({\r\n      cards: this.shuffle(this.state.cards),\r\n      lastCardIndex: this.state.cards.length\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"deck-container\">\r\n        {this.state.cards.map((card, index) => {\r\n          if (index < this.state.lastCardIndex) {\r\n            let mouseEvent = index === this.state.lastCardIndex - 1;\r\n            return (\r\n              <Card\r\n                ref={r => r && (this.cards[index] = r)}\r\n                card={card}\r\n                key={card.toString() + index}\r\n                index={index}\r\n                x={-0.25 * index}\r\n                y={-0.25 * index}\r\n                value={card.valueString}\r\n                type={card.typeString}\r\n                rotate={this.props.player2}\r\n                onMouseDown={mouseEvent}\r\n                mouseUp={this.releaseCard}\r\n              />\r\n            );\r\n          }\r\n          return null;\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Deck;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Player from \"./componnents/Player\";\nimport Deck from \"./componnents/Deck\";\nimport Switch from \"react-switch\";\nimport \"./reponsive.css\";\n\nconst { Board } = require(\"pini\");\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    let twoPlayers = props.location.search.includes(\"twoPlayers=true\");\n    this.state = {\n      player1: true,\n      firstRound: true,\n      twoPlayers\n    };\n    this.board = new Board();\n  }\n\n  componentDidMount() {\n    this.dealFirstRound();\n  }\n  dealFirstRound=()=> {\n    if (this.board.player2.round < 2) {\n      this.deck.sendNextCard(\n        true,\n        (card, cardElement, cardIndex, cb) => {\n          this.setState({\n            cardData: {\n              pos: false,\n              card,\n              cardElement,\n              cardIndex,\n              flip: !this.state.player1,\n              cb\n            }\n          });\n        },\n        () => {\n          Promise.resolve(1).then(this.setState(\n            {\n              player1: !this.state.player1\n            },this.dealFirstRound)\n          );\n        }\n      );\n      // this.deck.sendNextCard(true, this.addCardToPlayer2);\n    } else {\n      this.setState({\n        firstRound: false\n      });\n    }\n  }\n\n  moveCardToHand = (pos, card, cardElement, cardIndex, cb) => {\n    this.setState({\n      cardData: {\n        pos,\n        card,\n        cardElement,\n        cardIndex,\n        flip: !this.state.player1,\n        cb: runPlayer2 => {\n          cb(runPlayer2);\n          if (!runPlayer2) return;\n          if (!this.state.twoPlayers) {\n            this.deck.sendNextCard(\n              this.board.player2.round < 5,\n              this.addCardToPlayer2\n            );\n          } else {\n            if (this.board.gameEnded()) {\n              this.checkWinner();\n            } else {\n              this.setState({\n                player1: !this.state.player1\n              });\n            }\n          }\n          // cb(runPlayer2, this.board.player2.round < 5);\n        }\n      }\n    });\n  };\n  addCardToPlayer2 = (p2Card, cardElement, cardIndex, callback) => {\n    this.setState({\n      p2CardData: {\n        pos: false,\n        card: p2Card,\n        cardElement,\n        cardIndex,\n        flip: true,\n        cb: () => {\n          callback();\n          if (this.board.gameEnded()) {\n            this.checkWinner();\n          }\n        }\n      }\n    });\n  };\n\n  checkWinner = () => {\n    // need to call this function when last card is placed\n    try {\n      let winner = this.board.winner();\n      console.log(winner);\n      this.setState({\n        p2Visible: true,\n        winner\n      });\n    } catch (e) {\n      if (e.message.indexOf(\"h.qualifiesHigh is not a function\") === -1) {\n        console.log(e.message);\n      }\n    }\n    // reveale player 2 hands + results\n    // display winner\n  };\n\n  switchPlayers = () => {\n    // if (this.state.twoPlayers) {\n    //   window.location.search = \"\";\n    // } else {\n    //   window.location.search = \"twoPlayers=true\";\n    // }\n    // this.reset();\n    if (this.state.twoPlayers && !this.state.player1){\n      // moving to single player, if this is player 2 turn, should happen now \n      this.deck.sendNextCard(\n        this.board.player2.round < 5,\n        this.addCardToPlayer2,\n        ()=>{\n          this.setState({\n            twoPlayers: !this.state.twoPlayers,\n            player1: true\n          });\n        }\n      );\n    } else {\n      this.setState({\n        twoPlayers: !this.state.twoPlayers,\n        player1: true\n      });\n    }\n  };\n  reset = () => {\n    this.deck.resetDeck();\n    this.board = new Board();\n    this.player1.reset();\n    this.player2.reset();\n    this.setState({\n      p2Visible: false,\n      winner: null\n    });\n  };\n\n  renderControls() {\n    return (\n      <div className=\"controls-container\">\n        <div className=\"buttons-container\">\n          <button className=\"check-button\" name=\"finish\" onClick={this.reset}>\n            New Game\n          </button>\n          <label className=\"switch-container\">\n            <Switch\n              checked={this.state.twoPlayers}\n              uncheckedIcon={false}\n              checkedIcon={false}\n              height={22}\n              onColor={\"#32ff73\"}\n              onChange={this.switchPlayers}\n            />\n            <span className=\"switch-label\">2 Players</span>\n          </label>\n        </div>\n        <Deck\n          ref={r => (this.deck = r)}\n          player2={!this.state.player1}\n          moveCardToHand={this.moveCardToHand}\n          // p2Card={this.addCardToPlayer2}\n        />\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className={\"board\"}>\n          <Player\n            ref={r => (this.player2 = r)}\n            id={1}\n            currentPlayer={!this.state.firstRound && !this.state.player1}\n            name={this.board.player2.name}\n            winner={this.state.winner}\n            player={this.board.player2}\n            visible={this.state.p2Visible}\n            ignoreCard={\n              (this.state.firstRound || this.state.twoPlayers) &&\n              this.state.player1\n            }\n            cardData={\n              this.state.firstRound || this.state.twoPlayers\n                ? this.state.cardData\n                : this.state.p2CardData\n            }\n          />\n          {this.renderControls()}\n          <Player\n            ref={r => (this.player1 = r)}\n            id={-1}\n            currentPlayer={!this.state.firstRound && this.state.player1}\n            name={this.board.player1.name}\n            winner={this.state.winner}\n            player={this.board.player1}\n            visible={!this.state.twoPlayers}\n            ignoreCard={\n              (this.state.firstRound || this.state.twoPlayers) &&\n              !this.state.player1\n            }\n            cardData={this.state.cardData}\n          />\n        </div>\n        {/* <button className=\"check-button\" name=\"check\" onClick={this.checkWinner}>Check</button> */}\n        {/* <button className=\"check-button\" style={{ top: \"100px\" }} name=\"finish\" onClick={this.addCardToPlayer2}>Player2</button> */}\n        <div className=\"alert\">\n          <span>Thank you for running this game on landscape</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// {/* hands={[\n//             { cards: [] },\n//             { cards: [] },\n//             { cards: [{ valueString: \"A\", typeString: \"diams\" }] },\n//             { cards: [{ valueString: \"A\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }, { valueString: \"A\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }] },\n//             { cards: [{ valueString: \"A\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }] }\n//           ]} */}\n// {/* hands={[\n//             { cards: [] },\n//             { cards: [] },\n//             { cards: [{ valueString: \"A\", typeString: \"diams\" }] },\n//             { cards: [] },\n//             { cards: [{ valueString: \"A\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }, { valueString: \"A\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }] }\n//           ]} */}\n// {/* <Hand cards={[]} /> */ }\n// {/* <Hand cards={[{ valueString: \"A\", typeString: \"diams\" }]} /> */ }\n// {/* <Hand cards={[{ valueString: \"A\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }]} /> */ }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      console.log(\"service window loaded\");\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n// import { Provider } from 'react-redux';\n// import {store} from './store';\n\nReactDOM.render(\n    <Router>\n        <Route path=\"/\" component={App} />\n    </Router>, document.getElementById('root'));\n// const rootElement = document.getElementById('root')\n// ReactDOM.render(\n//     <Provider store={store}>\n//         <App />\n//     </Provider>,\n//     rootElement\n// )\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}