{"version":3,"sources":["componnents/Card.js","componnents/Hand.js","componnents/Player.js","componnents/Deck.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","onMouseDown","e","document","addEventListener","moveCard","stopListen","stopPropagation","preventDefault","setState","visible","animate","state","rel","x","pageX","pos","y","pageY","removeEventListener","mouseUp","card","index","animationEnd","type","console","log","this","classList","add","remove","val","className","style","Object","assign","left","top","color","ref","r","onAnimationEnd","value","getSymbol","React","Component","Hand","cards","cardElement","posGoal","forced","hand","addCard","getCenterX","width","getCenterY","height","onCardMoveEnd","animationName","clearTimer","window","clearTimeout","resolve","handPos","getPos","cardCount","timer","Math","max","sqrt","setProperty","setTimeout","transform","Promise","reject","getBoundingClientRect","visibleLastCard","length","solved","name","round","map","key","toString","valueString","typeString","renderHand","Player","hands","prevProps","prevState","snapshot","cardData","cardPos","cardRealPos","i","player","then","cb","addedPromises","bottom","right","all","results","result","some","catch","forEach","reset","currentPlayer","winner","id","CardData","require","Deck","releaseCard","cardIndex","moveCardToHand","success","p2Card","element","lastCardIndex","showCard","createCards","shuffle","res","VALUES","TYPES","push","array","sort","random","mouseEvent","Board","App","addCardToPlayer2","callback","p2CardData","board","gameEnded","checkWinner","p2Visible","message","indexOf","deck","resetDeck","player1","player2","onClick","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5c354ca6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Card.css';\r\n\r\nclass Card extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            pos: {\r\n                x: 0,\r\n                y: 0\r\n            }\r\n        }\r\n    }\r\n\r\n    getSymbol(type){\r\n        switch (type){\r\n            case \"hearts\":\r\n                return \"♥\";\r\n            case \"clubs\":\r\n                return \"♣\";\r\n            case \"spades\":\r\n                return \"♠\";\r\n            case \"diams\":\r\n                return \"♦\";\r\n            default: \r\n                return \"No\"\r\n        }\r\n    }\r\n    onMouseDown=(e)=>{\r\n        if (!this.props.onMouseDown) return;\r\n        // let pos = this.card.getBoundingClientRect();\r\n        document.addEventListener(\"mousemove\", this.moveCard);\r\n        document.addEventListener(\"mouseup\", this.stopListen);\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        // console.log(\"stratX: \", e.pageX - pos.left)\r\n        this.setState({\r\n            visible: true,\r\n            // dragging: true,\r\n            animate: !this.state.visible,\r\n            rel: {\r\n                x: e.pageX - this.state.pos.x,\r\n                y: e.pageY - this.state.pos.y   \r\n            } });\r\n    }\r\n    moveCard = (e) => {\r\n        this.setState({\r\n            pos: {\r\n                x: e.pageX - this.state.rel.x,\r\n                y: e.pageY - this.state.rel.y\r\n            }\r\n        })\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n    }\r\n    stopListen=(e)=>{\r\n        document.removeEventListener(\"mouseup\", this.stopListen);\r\n        document.removeEventListener(\"mousemove\", this.moveCard);\r\n        this.props.mouseUp && this.props.mouseUp({\r\n            x: e.pageX,\r\n            y: e.pageY\r\n        }, this.props.card, this.card, this.props.index);\r\n    }\r\n    animationEnd = () => {\r\n        this.setState({\r\n            animate: false\r\n        });\r\n    }\r\n    showCard() {\r\n\r\n        console.log(\"flipping card 2\");\r\n        this.card.classList.add(\"animate\");\r\n        this.card.classList.remove(\"hidden\");\r\n    }\r\n    \r\n    get element(){\r\n        return this.card;\r\n    }\r\n    renderCorner(val, type, pos) {\r\n        return <div className={\"small \"+pos}>\r\n            <div className=\"small-number\">{val}</div>\r\n            <div className=\"small-symbol\">{type}</div>\r\n        </div>\r\n    }\r\n    render() {\r\n        let visible = \"card-container\" + (this.props.visible || this.state.visible ? \"\" : \" hidden\") + (this.state.animate? \" animate\" : \"\");\r\n        let style = Object.assign({\r\n            left: this.state.pos.x + \"px\",\r\n            top: this.state.pos.y + \"px\",\r\n            color: this.props.card.color === \"r\" ? \"#d12d36\" : \"#333\"\r\n        }, \r\n            this.props.style);\r\n        return (\r\n            <div ref={((r)=>this.card = r)} className={visible} style={style} onMouseDown={this.onMouseDown} onAnimationEnd={this.animationEnd}>\r\n                <div className=\"side front\">\r\n                    {/* {this.renderCorner(this.props.value, this.getSymbol(this.props.type), \"top\")} */}\r\n                    <div className={\"small top\"}>\r\n                        <div className=\"small-number\">{this.props.value}</div>\r\n                        <div className=\"small-symbol\">{this.getSymbol(this.props.type)}</div>\r\n                    </div>\r\n                    <div className=\"middle\"><div>{this.props.value}</div></div>\r\n                    {/* {this.renderCorner(this.props.value, this.getSymbol(this.props.type), \"bottom\")} */}\r\n                    <div className={\"small bottom\"}>\r\n                        <div className=\"small-number\">{this.props.value}</div>\r\n                        <div className=\"small-symbol\">{this.getSymbol(this.props.type)}</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"side back\"></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Card;\r\n\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nimport './Hand.css';\r\n\r\nclass Hand extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            cards: []\r\n        }\r\n    }\r\n    componentDidMount(){\r\n    }\r\n    addCard(card, cardElement, posGoal, forced) {\r\n        // let cards = [...this.state.cards];\r\n        if (this.props.hand.addCard(card) || forced) {\r\n            function getCenterX(pos) {\r\n                return pos.x + (pos.width / 2);\r\n            }\r\n            function getCenterY(pos) {\r\n                return pos.y + (pos.height / 2);\r\n            }\r\n            // cards.push(card);\r\n            // pos goal shold be the transform = translate3d(posGoal.x+\"px\", posGoal.y + \"px\", 10px )\r\n            let onCardMoveEnd = (e)=>{\r\n                if (e.animationName === \"trans-animate\"){\r\n                    clearTimer && window.clearTimeout(clearTimer);\r\n                    cardElement.classList.remove(\"trans-animate\");\r\n                    cardElement.removeEventListener(\"animattionend\", onCardMoveEnd);\r\n                    this.resolve(true);\r\n                    this.setState({ cards: [...this.props.hand.cards] });\r\n                }\r\n            }\r\n            cardElement.addEventListener(\"animationend\", onCardMoveEnd);\r\n            // cardElement\r\n            let handPos = this.getPos();\r\n            let x = getCenterX(handPos) - getCenterX(posGoal);\r\n            let y = getCenterY(handPos) - getCenterY(posGoal) + (35 * (this.cardCount));\r\n            let timer = Math.max(300, Math.sqrt(x) * 2 + 350);\r\n            cardElement.style.setProperty(\"--tran-time\", timer + \"ms\");\r\n            console.log(\"tran time changed\", timer);\r\n            let clearTimer = window.setTimeout(() => {\r\n                onCardMoveEnd({ animationName: \"trans-animate\" })\r\n            }, timer);\r\n            cardElement.classList.add(\"trans-animate\");\r\n            // cardElement.classList.add(\"animate\");\r\n            cardElement.style.transform = `translate3d(${x - 2}px, ${y - 2}px, 10px)`;\r\n            return new Promise((resolve, reject)=>{\r\n                this.resolve = resolve;\r\n            });\r\n        }\r\n        return Promise.resolve(false);\r\n    }\r\n    reset(){\r\n        this.setState({ \r\n            cards: []\r\n        });\r\n    }\r\n    get cardCount(){\r\n        return this.state.cards.length;\r\n    }\r\n    getPos(){\r\n        return this.hand.getBoundingClientRect();\r\n    }\r\n    renderHand(){\r\n        if (this.props.visibleLastCard && this.state.cards.length === 5 ){\r\n            return <div className=\"hand-result\">{this.props.hand.solved.name}</div>\r\n        }\r\n    }\r\n    render(){\r\n        let style= {\r\n            \"borderColor\": this.props.round > this.state.cards.length ? \"green\" : \"red\"    \r\n        }\r\n        return <div ref={(r) => this.hand = r} style={style} className=\"hand-container\">\r\n            {this.state.cards.map((card, index)=>{\r\n                let transform = `translateY(${35 * index}px`;\r\n                let visible = this.props.visibleLastCard || index < 4;\r\n                return <Card card={card} key={card.toString() + index} index={index} value={card.valueString} type={card.typeString} style={{ transform }} visible={visible} />\r\n            })}\r\n            {this.renderHand()}\r\n        </div>      \r\n    }\r\n}\r\n\r\nexport default Hand;","import React from 'react';\r\nimport Hand from './Hand';\r\n\r\nimport './Player.css';\r\n\r\nclass Player extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            hands: [\r\n                { },\r\n                { },\r\n                { },\r\n                { },\r\n                { }\r\n            ]\r\n        };\r\n        this.hands = [];\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot){\r\n        if (prevProps.cardData !== this.props.cardData){\r\n            let cardPos = this.props.cardData.pos;\r\n            let cardRealPos = this.props.cardData.cardElement.getBoundingClientRect();\r\n            if (!cardPos){\r\n                // player 2 add card\r\n                let i = 0;\r\n                while (!this.props.player.addCard(this.props.cardData.card, i) && i< 5){\r\n                    i += 1;\r\n                }\r\n                // let handPos = this.hands[i].getPos();\r\n                // let x = getCenterX(handPos) - getCenterX(cardRealPos);\r\n                // let y = getCenterY(handPos) - getCenterY(cardRealPos) + (35 * (this.hands[i].cardCount));\r\n                this.hands[i].addCard(this.props.cardData.card, this.props.cardData.cardElement, cardRealPos, true).then(this.props.cardData.cb);\r\n                return;\r\n            }\r\n\r\n            let addedPromises = this.hands.map((hand, index) => {\r\n                let handPos = hand.getPos();\r\n                // console.log(`cb:${cardPos.x} > ht:${handPos.top} && ct:${cardPos.top} < hb:${handPos.height + handPos.top} &&\r\n                //     cl:${cardPos.left} < hr:${handPos.right} && cr:${cardPos.right} > hl:${handPos.left}`);\r\n                if (cardPos.y > handPos.top && cardPos.y < handPos.bottom &&\r\n                    cardPos.x < handPos.right && cardPos.x > handPos.left &&\r\n                    this.props.player.round > hand.cardCount) {\r\n                    let forced = this.props.player.addCard(this.props.cardData.card, index);\r\n                    // let x = getCenterX(handPos) - getCenterX(cardRealPos) + 1;\r\n                    // let y = getCenterY(handPos) - getCenterY(cardRealPos) - (35 * (hand.cardCount) + 1);\r\n                    return hand.addCard(this.props.cardData.card, this.props.cardData.cardElement, cardRealPos, forced);\r\n                    // let hands = [...this.state.hands];\r\n                    // hands[index].cards.push(this.props.cardData.card);\r\n                    // this.setState({hands});\r\n                }\r\n                return Promise.resolve(false);\r\n            });\r\n            Promise.all(addedPromises).then(results=>{\r\n                let result = results.some((result) => result);\r\n                this.props.cardData.cb(result);\r\n            }).catch(e=>{\r\n                console.log(e);\r\n            })\r\n            // this.props.cardData.cb(this.hands.some((hand, index) => {\r\n            //     let handPos = hand.getPos();\r\n            //     // console.log(`cb:${cardPos.x} > ht:${handPos.top} && ct:${cardPos.top} < hb:${handPos.height + handPos.top} &&\r\n            //     //     cl:${cardPos.left} < hr:${handPos.right} && cr:${cardPos.right} > hl:${handPos.left}`);\r\n            //     if (cardPos.y > handPos.top && cardPos.y < handPos.bottom &&\r\n            //       cardPos.x < handPos.right && cardPos.x > handPos.left && \r\n            //         this.props.player.round > hand.cardCount) \r\n            //       {\r\n            //         let forced = this.props.player.addCard(this.props.cardData.card, index);\r\n            //         let x = getCenterX(handPos) - getCenterX(cardRealPos);\r\n            //         let y = getCenterY(handPos) - getCenterY(cardRealPos) + (35 * (hand.cardCount - 1));\r\n            //         return hand.addCard(this.props.cardData.card, this.props.cardData.cardElement, { x, y }, forced);\r\n            //         // let hands = [...this.state.hands];\r\n            //         // hands[index].cards.push(this.props.cardData.card);\r\n            //         // this.setState({hands});\r\n            //     }\r\n            //     return false;\r\n            // }));\r\n        }\r\n    }\r\n    reset(){\r\n        this.hands.forEach(hand=>{\r\n            hand.reset();\r\n        })\r\n    }\r\n    render() {\r\n        return <div className=\"player-container\">\r\n            { this.props.player.hands.map((hand, index) => {\r\n                return <Hand ref={(r)=>{\r\n                    this.hands[index] = r;\r\n                }} key={this.props.name+index} round={this.props.player.round} hand={hand} visibleLastCard={this.props.currentPlayer || this.props.winner} />\r\n            })\r\n            }\r\n            {this.props.winner && this.props.winner === this.props.id ? (<div className=\"winner-banner\">WINNER</div>): null}\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Player;","import React from 'react';\r\nimport Card from './Card';\r\n// import { CardData } from 'pini';\r\n\r\nimport './Deck.css';\r\n\r\nconst { CardData }= require('pini');\r\n\r\nclass Deck extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        let cards = this.createCards();\r\n        this.state = {\r\n            cards: this.shuffle(cards),\r\n            lastCardIndex: cards.length\r\n        }\r\n        this.cards = [];\r\n    }\r\n    createCards(){\r\n        let res = [];\r\n        CardData.VALUES.forEach((value, index) => {\r\n            if (!index) return;\r\n            CardData.TYPES.forEach(type => {\r\n                res.push(new CardData.Card(value, type));\r\n            }); \r\n        });\r\n        return res;\r\n    }\r\n    shuffle(array) {\r\n        return array.sort(() => Math.random() - 0.5);\r\n    }\r\n    releaseCard = (pos, card, cardElement, cardIndex)=>{\r\n        this.props.moveCardToHand(pos, card, cardElement, cardIndex, (success) => {\r\n            if (success) {\r\n                // remove current card and add card for p2\r\n                // Promise.resolve(1).then(()=>{\r\n                // this.props.p2Card(this.state.cards[--cardIndex], cardElement);\r\n                cardIndex -= 1;\r\n                this.props.p2Card(this.state.cards[cardIndex], this.cards[cardIndex].element, ()=>{\r\n                        Promise.resolve(1).then(()=>this.setState({ lastCardIndex: cardIndex }));\r\n                    });\r\n                Promise.resolve(1).then(()=>this.cards[cardIndex].showCard());\r\n                // });\r\n            }\r\n        });\r\n    }\r\n\r\n    resetDeck(){\r\n        this.setState({\r\n            cards: this.shuffle(this.state.cards),\r\n            lastCardIndex: this.state.cards.length\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"deck-container\">\r\n            {this.state.cards.map((card, index) => {\r\n                {/* let transform = `translate(-${0.5 * index}px, -${0.5 * index}px)`; */}\r\n                if (index < this.state.lastCardIndex){\r\n                    let mouseEvent = index === this.state.lastCardIndex - 1;\r\n                    return <Card ref={(r) => {\r\n                        if (r){\r\n                            this.cards[index] = r;\r\n                        }\r\n                    }} card={card} key={card.toString()+index} index={index} value={card.valueString} type={card.typeString} onMouseDown={mouseEvent} mouseUp={this.releaseCard} />\r\n                }\r\n                return null;\r\n            })}\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Deck;","import React from 'react';\nimport './App.css';\nimport Player from './componnents/Player';\nimport Deck from './componnents/Deck';\n\nconst { Board } = require('pini');\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={};\n    this.board = new Board();\n  }\n\n  moveCardToHand = (pos, card, cardElement, cardIndex, cb)=>{\n    this.setState({\n      cardData:{\n        pos, card, cardElement, cardIndex, cb\n      }\n    })\n  }\n  addCardToPlayer2 = (p2Card, cardElement, callback) => {\n    this.setState({\n      p2CardData: {\n        pos: false, card: p2Card, cardElement, cb: () => {\n          callback();\n          if (this.board.gameEnded()) {\n            this.checkWinner();\n          }\n        }\n      }\n    });\n  }\n\n  checkWinner=()=>{\n    // need to call this function when last card is placed\n    try{\n      let winner = this.board.winner(); \n      console.log(winner);\n      this.setState({\n        p2Visible: true,\n        winner\n      })\n    } catch(e){\n      if (e.message.indexOf(\"h.qualifiesHigh is not a function\") === -1){\n        console.log(e.message);\n      }\n    } \n    // reveale player 2 hands + results\n    // display winner\n\n  }\n  reset=()=>{\n    this.deck.resetDeck();\n    this.board = new Board();\n    this.player1.reset();\n    this.player2.reset();\n    this.setState({\n      p2Visible: false,\n      winner: null\n    })\n  }\n\n  render(){\n    return (  \n      <div className=\"App\">\n        {/* <header className=\"App-header\">\n        </header> */}\n        <div className=\"board\">\n          <Player ref={(r) => this.player1 = r} currentPlayer id={1} winner={this.state.winner} player={this.board.player1} cardData={this.state.cardData} name=\"Player1\" />\n          <Player ref={(r) => this.player2 = r} name=\"Player2\" id={-1} winner={this.state.winner} visible={this.state.p2Visible} cardData={this.state.p2CardData} player={this.board.player2} />\n        </div>\n        <Deck ref={(r) => this.deck = r} moveCardToHand={this.moveCardToHand} p2Card={this.addCardToPlayer2} />\n        <button className=\"check-button\" style={{ top: \"75px\" }} name=\"finish\" onClick={this.reset}>New Game</button>\n        {/* <button className=\"check-button\" name=\"check\" onClick={this.checkWinner}>Check</button> */}\n        {/* <button className=\"check-button\" style={{ top: \"100px\" }} name=\"finish\" onClick={this.addCardToPlayer2}>Player2</button> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// {/* hands={[\n//             { cards: [] },\n//             { cards: [] },\n//             { cards: [{ valueString: \"A\", typeString: \"diams\" }] },\n//             { cards: [{ valueString: \"A\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }, { valueString: \"A\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }] },\n//             { cards: [{ valueString: \"A\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }] }\n//           ]} */}\n// {/* hands={[\n//             { cards: [] },\n//             { cards: [] },\n//             { cards: [{ valueString: \"A\", typeString: \"diams\" }] },\n//             { cards: [] },\n//             { cards: [{ valueString: \"A\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }, { valueString: \"A\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }] }\n//           ]} */}\n// {/* <Hand cards={[]} /> */ }\n// {/* <Hand cards={[{ valueString: \"A\", typeString: \"diams\" }]} /> */ }\n// {/* <Hand cards={[{ valueString: \"A\", typeString: \"diams\" }, { valueString: \"10\", typeString: \"diams\" }]} /> */ }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      console.log(\"service window loaded\");\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import { Provider } from 'react-redux';\n// import {store} from './store';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// const rootElement = document.getElementById('root')\n// ReactDOM.render(\n//     <Provider store={store}>\n//         <App />\n//     </Provider>,\n//     rootElement\n// )\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}